{"version":3,"sources":["service/API.js","service/ClientService.js","components/DialogQuestion.js","components/AppSettings.js","components/BlacklistService.js","utils/CssProps.js","components/DataTableClients.js","components/DataTableBlacklist.js","service/DatasourceService.js","utils/CookiesUtils.js","utils/Translate.js","components/DatasourceView.js","components/InnerData.js","service/ClientTimeoutService.js","components/ClientSettingsView.js","service/RestartService.js","service/SettingsService.js","components/OtherSettingsView.js","components/SettingsView.js","service/LogService.js","components/DataTableLogs.js","components/LSTabMenu.js","components/MainSidebar.js","components/SidebarButton.js","components/App.js","serviceWorker.js","index.js","static/ls_logo_big.png","static/ls_logo_svg.svg"],"names":["axios","create","baseURL","responseType","ClientService","API","get","data","clients","imei","delete","imeiArr","i","length","push","DialogQuestion","props","renderFooter","bind","icon","className","onClick","this","onCancel","onConfirm","footer","visible","style","width","backgroundColor","color","modal","header","headerText","onHide","fontSize","message","Component","appSettings","BlacklistService","blacklist","blJson","imeilist","forEach","_imei","post","visibility","DataTableClients","emptyClient","updateDimensions","window","innerWidth","setState","showBtnLabel","state","kickClientDialog","kickClientsDialogSelected","addBlacklistDialog","addBlacklistDialogSelected","selectedClients","selectedClient","searchImei","searchImeiLoading","amountClients","clientsService","blacklistService","renderButtons","hideKickClientDialog","hideKickClientsDialogSelected","confirmKickClient","confirmKickClientsSelected","kickClient","kickClientsSelected","hideAddBlacklistDialog","hideAddBlacklistDialogSelected","confirmAddBlacklist","confirmAddBlacklistSelected","addBlacklist","addBlacklistSelected","confirmSearchImei","addEventListener","getClients","then","removeEventListener","client","globalFilter","response","toast","show","severity","summary","i18n","t","detail","life","filter","kickClients","console","log","includes","addToBlacklist","rowData","buttonStyle","marginLeft","type","tooltip","tooltipOptions","position","text","onCopy","textAlign","onInput","e","target","value","placeholder","colSpan","footerStyle","label","disabled","op","toggle","ref","el","undefined","marginTop","mode","height","renderHeader","border","borderRadius","left","renderToolbarButton","totalRecords","footerColumnGroup","renderFooterGroup","selection","onSelectionChange","emptyMessage","dataKey","paginator","rows","rowsPerPageOptions","paginatorTemplate","currentPageReportTemplate","rowHover","responsive","resizableColumns","selectionMode","headerStyle","field","sortable","body","DataTableBlacklist","emptyBlacklist","removeBlacklistDialog","removeBlacklistDialogSelected","addBlacklistImei","removeBlacklistImei","tagBlacklist","addBlacklistLoading","removeBlacklistLoading","blacklistSize","renderRowButtons","hideRemoveBlacklistDialog","hideRemoveBlacklistDialogSelected","removeBlacklist","removeBlacklistSelected","confirmRemoveBlacklist","confirmRemoveBlacklistSelected","confirmRemoveBlacklistOverlay","getBlacklist","newBlacklist","removeFromBlacklist","opr","size","btn","DatasourceService","requestForm","put","username","password","host","port","db_name","dbName","db_type","dbType","script_encoding","scriptEncoding","driver_class_name","driverClassName","additional","pool","auto_commit","autoCommit","connection_timeout","connectionTimeout","idle_timeout","idleTimeout","max_life_time","maxLifeTime","maximum_pool_size","maximumPoolSize","getCookie","name","matches","document","cookie","match","RegExp","replace","decodeURIComponent","setCookie","options","path","expires","Date","toUTCString","updatedCookie","encodeURIComponent","optionKey","optionValue","languages","lng","code","resources","en","translation","ru","getLanguage","lang","DatasourceView","propsType","filteredEncodings","filteredDbTypes","filteredDriverName","isToggleable","disabledApply","disabledReset","encodings","databases","current","datasourceService","changeDatasource","changeState","checkApply","checkProp","reset","searchEncoding","scriptEncodingAutoCompleteTemplate","dbTypeAutoCompleteTemplate","driverNameAutoCompleteTemplate","cardTemplate","searchDriverName","searchDbType","getDatasource","aliases","driver","restart","e1","chState","currentType","propType","defaultValue","newProps","_","isEqual","event","autoSearch","filteredType","elementType","setTimeout","filtered","query","trim","enc","toLowerCase","startsWith","result","item","padding","toggleable","legend","htmlFor","autoComplete","id","onChange","feedback","newPort","parseInt","isNaN","suggestions","completeMethod","dropdown","itemTemplate","autoResize","inputId","checked","data-pr-tooltip","newConnectionTimeout","newIdleTimeout","newLifeTime","newMaximumPoolSize","float","ClientTimeoutService","toutValue","toutBody","client_timeout","ClientSettingsView","smallHintStyleClasses","hidden","settingsType","clientTimeout","smallStyleClass","clientTimeoutService","changeClientSettings","checkSetting","getClientTimeout","changeClientTimeout","settingType","newSettings","aria-describedby","newClTout","onFocus","onBlur","RestartService","SettingsService","pass","xsrfToken","OtherSettingsView","selectedLang","isDarkMode","newPass","changePassLoading","onLangChange","confirmChangePass","settingsService","changeLanguage","refresh","changePassword","optionLabel","promptLabel","weakLabel","mediumLabel","strongLabel","restartState","iconRestartButton","SettingsView","showRestartButton","iconButtonClassName","restartBtnText","restartService","needRestart","scrollTo","top","behavior","forceUpdate","btnTxt","location","resSec","LogService","DataTableLogs","isMobile","handleSearch","clearTimeout","delaySearchTimer","searchText","logs","logsAmount","date","types","selectedTypes","searchChips","minDate","maxDate","logService","headerTemplate","typeBodyTemplate","onTypeFilterChange","onMessageFilterInput","typeItemTemplate","getLogs","datesLog","sortDatesLog","sort","minDateArr","split","map","d","maxDateArr","prevProps","prevState","display","fontWeight","cal","dateFormat","readOnlyInput","showButtonBar","locale","firstDayOfWeek","dayNames","dayNamesShort","dayNamesMin","monthNames","monthNamesShort","today","clear","weekHeader","dt","day","getDate","zero","res","getMonth","getFullYear","join","er","str","showClear","option","typeFilter","renderTypeFilter","msgFilter","renderMessageFilter","rowGroupMode","groupField","sortMode","sortField","rowGroupHeaderTemplate","rowGroupFooterTemplate","footerTemplate","sortOrder","rowIndex","filterElement","wordWrap","LSTabMenuInner","menus","keyLabel","command","hash","tabRef","createRef","tabMenu","tabKeyLabel","find","a","activeItem","tabName","menu","_activeItem","onTabChange","model","LSTabMenu","lsTabRef","React","setActiveIndex","key","exact","component","MainSidebar","changeRoute","logout","substr","onHideSidebar","onShowSidebar","src","ls_logo","alt","r","SidebarButton","isSidebarVisible","tabMenuRef","init","hashLink","App","margin","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","module","exports"],"mappings":"0WAEeA,MAAMC,OAAO,CACxBC,QAAS,mBACTC,aAAc,SCFLC,EAAb,+NAGsBC,EAAIC,IAAI,YAH9B,uCAG2CC,KAAKC,SAHhD,4KAMsBC,GANtB,4EAO2B,kBAATA,EAPlB,gCAQ0BJ,EAAIK,OAAO,iBAAmBD,GARxD,uCAQ+DF,MAR/D,OAWY,IADII,EAAU,GACNC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC5BD,EAAQG,KAAKL,EAAKG,GAAGH,MAZrC,iBAe0BJ,EAAIK,OAAO,qBAAuBC,GAf5D,wCAesEJ,MAftE,6KAmBqBE,GAnBrB,iFAoBsBJ,EAAIC,IAAI,mBAAqBG,GApBnD,uCAoB0DF,MApB1D,yG,+DCGaQ,EAAb,kDAEI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFL,EAFvB,2DAQQ,OACI,oCACI,kBAAC,SAAD,CAAQC,KAAK,cAAcC,UAAU,gBAAgBC,QAASC,KAAKN,MAAMO,WACzE,kBAAC,SAAD,CAAQJ,KAAK,cAAcC,UAAU,gBAAgBC,QAASC,KAAKN,MAAMQ,eAXzF,+BAiBQ,IAAMC,EAASH,KAAKL,eAEpB,OACI,kBAAC,SAAD,CAAQS,QAASJ,KAAKN,MAAMU,QACpBC,MAAO,CAAEC,MAAO,OAAQC,gBAAiB,UAAWC,MAAM,SAC1DC,OAAK,EACLC,OAAQV,KAAKN,MAAMiB,WACnBR,OAAQA,EACRS,OAAQZ,KAAKN,MAAMkB,QACvB,6BACI,yBAAKd,UAAU,wBAAwBO,MAAO,CAACQ,SAAU,WACzD,6BACCb,KAAKN,MAAMoB,cA7BhC,GAAoCC,a,QCJvBC,EACG,ICAHC,EAAb,2OAG+BlC,EAAIC,IAAI,cAHvC,OAKQ,IAFIkC,EAHZ,OAGsDjC,KAAKiC,UAC/CC,EAAS,GACL7B,EAAI,EAAGA,EAAI4B,EAAU3B,OAAQD,IACjC6B,EAAO3B,KAAK,CAACL,KAAM+B,EAAU5B,KANzC,yBAQe6B,GARf,+KAWyBhC,GAXzB,8EAYYF,EAAO,CAAEmC,SAAU,IACJ,kBAATjC,EACNF,EAAKmC,SAAS5B,KAAKL,GAEnBA,EAAKkC,SAAQ,SAAAC,GACTrC,EAAKmC,SAAS5B,KAAK8B,EAAMnC,SAjBzC,SAqBsBJ,EAAIwC,KAAK,aAActC,GArB7C,uCAqBoDA,MArBpD,qLAwB8BE,GAxB9B,4EAyB2B,kBAATA,EAzBlB,gCA0B0BJ,EAAIK,OAAO,mBAAqBD,GA1B1D,uCA0BiEF,MA1BjE,OA6BY,IADII,EAAU,GACNC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC5BD,EAAQG,KAAKL,EAAKG,GAAGH,MA9BrC,iBAgC0BJ,EAAIK,OAAO,uBAAyBC,GAhC9D,wCAgCwEJ,MAhCxE,0G,+BCDauC,EACD,SADCA,EAEA,UCkBAC,EAAb,kDAMI,WAAY/B,GAAQ,IAAD,8BACf,cAAMA,IALVgC,YAAc,CACVvC,KAAM,MAGS,EAkDnBwC,iBAAmB,WACZC,OAAOC,YAAc,IACpB,EAAKC,SAAS,CAAEC,cAAc,IAE9B,EAAKD,SAAS,CAAEC,cAAc,KApDlC,EAAKC,MAAQ,CACTC,kBAAkB,EAClBC,2BAA2B,EAC3BC,oBAAoB,EACpBC,4BAA4B,EAC5BC,gBAAiB,KACjBC,eAAgB,EAAKZ,YACrBxC,QAAS,KACTqD,WAAY,GACZC,kBAAmBhB,EACnBiB,cAAe,EACfV,aAAcH,OAAOC,WAAa,KAGtC,EAAKa,eAAiB,IAAI5D,EAC1B,EAAK6D,iBAAmB,IAAI1B,EAC5B,EAAK2B,cAAgB,EAAKA,cAAchD,KAAnB,gBAErB,EAAKiD,qBAAuB,EAAKA,qBAAqBjD,KAA1B,gBAC5B,EAAKkD,8BAAgC,EAAKA,8BAA8BlD,KAAnC,gBACrC,EAAKmD,kBAAoB,EAAKA,kBAAkBnD,KAAvB,gBACzB,EAAKoD,2BAA6B,EAAKA,2BAA2BpD,KAAhC,gBAClC,EAAKqD,WAAa,EAAKA,WAAWrD,KAAhB,gBAClB,EAAKsD,oBAAsB,EAAKA,oBAAoBtD,KAAzB,gBAE3B,EAAKuD,uBAAyB,EAAKA,uBAAuBvD,KAA5B,gBAC9B,EAAKwD,+BAAiC,EAAKA,+BAA+BxD,KAApC,gBACtC,EAAKyD,oBAAsB,EAAKA,oBAAoBzD,KAAzB,gBAC3B,EAAK0D,4BAA8B,EAAKA,4BAA4B1D,KAAjC,gBACnC,EAAK2D,aAAe,EAAKA,aAAa3D,KAAlB,gBACpB,EAAK4D,qBAAuB,EAAKA,qBAAqB5D,KAA1B,gBAC5B,EAAK6D,kBAAoB,EAAKA,kBAAkB7D,KAAvB,gBAjCV,EANvB,gEA0CyB,IAAD,OAChBgC,OAAO8B,iBAAiB,SAAU1D,KAAK2B,kBACvC3B,KAAK0C,eAAeiB,aAAaC,MAAK,SAAA3E,GAClC,EAAK6C,SAAS,CACVW,cAAexD,EAAKM,OACpBL,QAASD,SA/CzB,6CAqDQ2C,OAAOiC,oBAAoB,SAAU7D,KAAK2B,oBArDlD,6CAiEQ3B,KAAK8B,SAAS,CAAEG,kBAAkB,MAjE1C,sDAqEQjC,KAAK8B,SAAS,CAAEI,2BAA2B,MArEnD,wCAwEsB4B,GACd9D,KAAK8B,SAAS,CACVQ,eAAgBwB,EAChB7B,kBAAkB,MA3E9B,mDAgFQjC,KAAK8B,SAAS,CACVI,2BAA2B,MAjFvC,4KAuFYlC,KAAK8B,SAAS,CAAEU,kBAAmBhB,IAvF/C,SAwF6BxB,KAAK0C,eAAeH,WAAWvC,KAAKgC,MAAMO,YAxFvE,OAwFgBtD,EAxFhB,OAyFYe,KAAK8B,SAAS,CAAEU,kBAAmBhB,EAAmBuC,aAAc9E,EAAI,YAzFpF,gDA2FgB+E,EAAW,KAAEA,SAAS/E,KAC1Be,KAAK8B,SAAS,CAAEU,kBAAmBhB,IACnCxB,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,QAASC,QAASC,IAAKC,EAAE,SAAUC,OAAQP,EAASlD,QAAS0D,KAAMxD,IA7F3G,6RAmGgB9B,EAAUc,KAAKgC,MAAM9C,QAAQuF,QAAO,SAAAX,GAAM,OAAIA,EAAO3E,OAAS,EAAK6C,MAAMM,eAAenD,QAnGxG,SAoG6Ba,KAAK0C,eAAegC,YAAY1E,KAAKgC,MAAMM,eAAenD,MApGvF,OAoGgBF,EApGhB,OAqGYe,KAAK8B,SAAS,CACV5C,QAASA,EACT+C,kBAAkB,EAClBK,eAAgBtC,KAAK0B,YACrBe,cAAevD,EAAQK,SAE3BS,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,UAAWC,QAASC,IAAKC,EAAE,cAAeC,OAAQtF,EAAK6B,QAAS0D,KAAMxD,IA3G9G,gDA6GgBgD,EAAW,KAAEA,SAAS/E,KAC1B0F,QAAQC,IAAIP,IAAKC,EAAE,qBAAuBN,GAC1ChE,KAAK8B,SAAS,CACVG,kBAAkB,IAEtBjC,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,QAASC,QAASC,IAAKC,EAAE,SAAUC,OAAQP,EAASlD,QAAS0D,KAAMxD,IAlH3G,sSAwHgB9B,EAAUc,KAAKgC,MAAM9C,QAAQuF,QAAO,SAAAX,GAAM,OAAK,EAAK9B,MAAMK,gBAAgBwC,SAASf,MAxHnG,SAyH6B9D,KAAK0C,eAAegC,YAAY1E,KAAKgC,MAAMK,iBAzHxE,OAyHgBpD,EAzHhB,OA2HYe,KAAK8B,SAAS,CACV5C,QAASA,EACTgD,2BAA2B,EAC3BI,eAAgBtC,KAAK0B,YACrBe,cAAevD,EAAQK,SAG3BS,KAAKiE,MAAMC,KAAK,CACZC,SAAU,UACVC,QAASC,IAAKC,EAAE,cAChBC,OAAQtF,EAAK6B,QACb0D,KAAMxD,IAtItB,gDAyIYhB,KAAK8B,SAAS,CACVI,2BAA2B,IAE3B8B,EAAW,KAAEA,SAAS/E,KAC1Be,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,QAASC,QAASC,IAAKC,EAAE,SAAUC,OAAQP,EAASlD,QAAS0D,KAAMxD,IA7I3G,8JAkJQhB,KAAK8B,SAAS,CAAEK,oBAAoB,MAlJ5C,uDAsJQnC,KAAK8B,SAAS,CAAEM,4BAA4B,MAtJpD,0CAyJwB0B,GAChB9D,KAAK8B,SAAS,CACVQ,eAAgBwB,EAChB3B,oBAAoB,MA5JhC,oDAiKQnC,KAAK8B,SAAS,CACVM,4BAA4B,MAlKxC,gLAwKgBlD,EAAUc,KAAKgC,MAAM9C,QAAQuF,QAAO,SAAAX,GAAM,OAAIA,EAAO3E,OAAS,EAAK6C,MAAMM,eAAenD,QAxKxG,SAyK8Ba,KAAK2C,iBAAiBmC,eAAe9E,KAAKgC,MAAMM,eAAenD,MAzK7F,OAyKgBF,EAzKhB,OA0KYe,KAAK8B,SAAS,CACV5C,QAASA,EACTiD,oBAAoB,EACpBG,eAAgBtC,KAAK0B,YACrBe,cAAevD,EAAQK,SAG3BS,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,UAAWC,QAASC,IAAKC,EAAE,cAAeC,OAAQtF,EAAK6B,QAAS0D,KAAMxD,IAjL9G,gDAmLgBgD,EAAW,KAAEA,SAAS/E,KAC1Be,KAAK8B,SAAS,CACVK,oBAAoB,IAExBnC,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,QAASC,QAASC,IAAKC,EAAE,SAAUC,OAAQP,EAASlD,QAAS0D,KAAMxD,IAvL3G,ySA6LgB9B,EAAUc,KAAKgC,MAAM9C,QAAQuF,QAAO,SAAAX,GAAM,OAAK,EAAK9B,MAAMK,gBAAgBwC,SAASf,MA7LnG,SA8L8B9D,KAAK2C,iBAAiBmC,eAAe9E,KAAKgC,MAAMK,iBA9L9E,OA8LgBpD,EA9LhB,OA+LYe,KAAK8B,SAAS,CACV5C,QAASA,EACTiD,oBAAoB,EACpBG,eAAgBtC,KAAK0B,YACrBe,cAAevD,EAAQK,SAG3BS,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,UAAWC,QAASC,IAAKC,EAAE,cAAeC,OAAQtF,EAAK6B,QAAS0D,KAAMxD,IAtM9G,gDAwMgBgD,EAAW,KAAEA,SAAS/E,KAC1Be,KAAK8B,SAAS,CACVK,oBAAoB,IAExBnC,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,QAASC,QAASC,IAAKC,EAAE,SAAUC,OAAQP,EAASlD,QAAS0D,KAAMxD,IA5M3G,QA+MY9B,EAAUc,KAAKgC,MAAM9C,QAAQuF,QAAO,SAAAX,GAAM,OAAK,EAAK9B,MAAMK,gBAAgBwC,SAASf,MAEvF9D,KAAK8B,SAAS,CACV5C,QAASA,EACTkD,4BAA4B,EAC5BE,eAAgBtC,KAAK0B,YACrBe,cAAevD,EAAQK,SAG3BS,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,UAAWC,QAASC,IAAKC,EAAE,cAAeC,OAAQF,IAAKC,EAAE,8BAA+BE,KAAMxD,IAxNlI,mJA2NkB+D,GAAU,IAAD,OACbC,EAAc,CAChBC,WAAY,SAGhB,OACI,6BACI,kBAAC,SAAD,CAAQ5E,MAAO2E,EAAaE,KAAK,SAASrF,KAAK,mBAAmBC,UAAU,mBACpEqF,QAASd,IAAKC,EAAE,QAChBvE,QAAS,WAAO,EAAKgD,kBAAkBgC,IACvCK,eAAgB,CAACC,SAAU,SACnC,kBAAC,SAAD,CAAQhF,MAAO2E,EAAaE,KAAK,SAASrF,KAAK,YAAYC,UAAU,kBAC7DqF,QAASd,IAAKC,EAAE,qBAChBvE,QAAS,WAAO,EAAKsD,oBAAoB0B,IACzCK,eAAgB,CAACC,SAAU,SACnC,kBAAC,kBAAD,CAAiBC,KAAMP,EAAQ5F,KACdoG,OAAQ,WAAO,EAAKtB,MAAMC,KAAK,CAAEC,SAAU,UAAWC,QAASC,IAAKC,EAAE,cAAeC,OAAQF,IAAKC,EAAE,cAAeE,KAAMxD,MACtI,kBAAC,SAAD,CAAQX,MAAO2E,EAAaE,KAAK,SAASrF,KAAK,aACvCsF,QAASd,IAAKC,EAAE,mBAChBc,eAAgB,CAACC,SAAU,aA9OvD,qCAoPoB,IAAD,OACX,OACI,yBAAKhF,MAAO,CAACmF,UAAW,SACpB,0BAAM1F,UAAU,qBACZ,uBAAGA,UAAU,iBACjB,kBAAC,YAAD,CACIoF,KAAK,SACLO,QAAU,SAACC,GAAD,OAAO,EAAK5D,SAAS,CAACiC,aAAc2B,EAAEC,OAAOC,SACvDC,YAAaxB,IAAKC,EAAE,sBA5PxC,wCAkQsB7B,GACd,OACI,kBAAC,cAAD,KACI,kBAAC,MAAD,KACI,kBAAC,SAAD,CAAQtC,OAAQkE,IAAKC,EAAE,wBAAyBwB,QAAS,EAAGC,YAAa,CAACP,UAAW,WACrF,kBAAC,SAAD,CAAQrF,OAAQsC,QAvQpC,4CA6Q2B,IAAD,OAClB,OACI,oCACI,kBAAC,SAAD,CAAQuD,MAAOhG,KAAKgC,MAAMD,aAAesC,IAAKC,EAAE,QAAS,GAAIzE,KAAK,mBAAmBC,UAAU,mBACvFC,QAASC,KAAKgD,2BACdiD,UAAWjG,KAAKgC,MAAMK,kBAAoBrC,KAAKgC,MAAMK,gBAAgB9C,SAC7E,yBAAKc,MAAO,CAAC4E,WAAY,WACzB,kBAAC,SAAD,CAAQe,MAAOhG,KAAKgC,MAAMD,aAAesC,IAAKC,EAAE,qBAAsB,GAAIzE,KAAK,YAAYC,UAAU,kBAC7FC,QAASC,KAAKsD,4BACd2C,UAAWjG,KAAKgC,MAAMK,kBAAoBrC,KAAKgC,MAAMK,gBAAgB9C,SAC7E,yBAAKc,MAAO,CAAC4E,WAAY,WACzB,kBAAC,SAAD,CAAQe,MAAOhG,KAAKgC,MAAMD,aAAesC,IAAKC,EAAE,gBAAiB,GAAIzE,KAAK,eAClEE,QAAS,SAAC2F,GAAD,OAAO,EAAKQ,GAAGC,OAAOT,MACvC,kBAAC,eAAD,CAAcU,IAAK,SAACC,GAAD,OAAQ,EAAKH,GAAKG,IACjC,yBAAKvG,UAAU,gBACX,kBAAC,YAAD,CAAW+F,YAAaxB,IAAKC,EAAE,aACpBmB,QAAU,SAACC,GAAD,OAAO,EAAK5D,SAAS,CAACS,WAAYmD,EAAEC,OAAOC,WAGhE,kBAAC,SAAD,CAAQI,MAAOhG,KAAKgC,MAAMD,aAAesC,IAAKC,EAAE,UAAY,GAAIzE,KAAK,eAAeC,UAAU,mBACtFmG,SAAsC,KAA3BjG,KAAKgC,MAAMO,WACtBxC,QAASC,KAAKyD,oBACtB,kBAAC,SAAD,CAAQuC,MAAOhG,KAAKgC,MAAMD,aAAesC,IAAKC,EAAE,SAAW,GAAIzE,KAAK,qBAAqBC,UAAU,mBAC3FmG,cAAwCK,IAA7BtG,KAAKgC,MAAM+B,cAA6D,KAA7B/D,KAAKgC,MAAM+B,aACjEhE,QAAS,WACL4E,QAAQC,IAAI,EAAK5C,MAAM+B,cAAgB,EAAKjC,SAAS,CAACiC,aAAc,SAEpF,yBAAK1D,MAAO,CAACkG,UAAW,WACxB,kBAAC,cAAD,CAAaC,KAAK,gBAAgBnG,MAAO,CAACoG,OAAQ,QAASjF,WAAYxB,KAAKgC,MAAMQ,yBAzStG,+BA+Sc,IAAD,OACC9B,EAASV,KAAK0G,eAEpB,OACI,6BACI,kBAAC,QAAD,CAAON,IAAK,SAACC,GAAD,OAAQ,EAAKpC,MAAQoC,KACjC,kBAAC,UAAD,CAAShG,MAAO,CAACsG,OAAQ,OAAQC,aAAc,OAAQC,KAAM7G,KAAK8G,wBAClE,kBAAC,YAAD,CAAWpG,OAAQA,EACRkF,MAAO5F,KAAKgC,MAAM9C,QAClB6H,aAAc/G,KAAKgC,MAAM+E,aACzBC,kBAAmBhH,KAAKiH,kBAAkBjH,KAAKgC,MAAMS,eACrDyE,UAAWlH,KAAKgC,MAAMK,gBACtB8E,kBAAmB,SAACzB,GAAD,OAAO,EAAK5D,SAAS,CAACO,gBAAiBqD,EAAEE,SAC5D9F,UAAU,sBACViE,aAAc/D,KAAKgC,MAAM+B,aACzBqD,aAAc/C,IAAKC,EAAE,mBACrB+C,QAAQ,OACRC,WAAW,EACXC,KAAM,GACNC,mBAAoB,CAAC,GAAG,GAAG,IAC3BC,kBAAkB,uGAClBC,0BAA2BrD,IAAKC,EAAE,QAAU,YAAcD,IAAKC,EAAE,MAAQ,WAAaD,IAAKC,EAAE,MAAQ,kBACrGqD,UAAQ,EACRC,YAAU,EACVC,kBAAkB,GACzB,kBAAC,SAAD,CAAQC,cAAc,WAAWC,YAAa,CAAEzH,MAAO,UACvD,kBAAC,SAAD,CAAQ0H,MAAM,WAAWtH,OAAQ2D,IAAKC,EAAE,YAAa2D,UAAQ,IAC7D,kBAAC,SAAD,CAAQD,MAAM,OAAOtH,OAAQ2D,IAAKC,EAAE,YAAa2D,UAAQ,IACzD,kBAAC,SAAD,CAAQD,MAAM,iBAAiBtH,OAAQ2D,IAAKC,EAAE,gBAAiB2D,UAAQ,IACvE,kBAAC,SAAD,CAAQvH,OAAQ2D,IAAKC,EAAE,WAAY4D,KAAMlI,KAAK4C,cAAevC,MAAO,CAACC,MAAO,WAGhF,kBAAC,EAAD,CAAgBK,WAAY0D,IAAKC,EAAE,WAAYxD,QAASuD,IAAKC,EAAE,sBAC/ClE,QAASJ,KAAKgC,MAAMC,iBACpB/B,UAAWF,KAAKiD,WAChBhD,SAAUD,KAAK6C,qBACfjC,OAAQZ,KAAK6C,uBAE7B,kBAAC,EAAD,CAAgBlC,WAAY0D,IAAKC,EAAE,WAAYxD,QAASuD,IAAKC,EAAE,uBAC/ClE,QAASJ,KAAKgC,MAAME,0BACpBhC,UAAWF,KAAKkD,oBAChBjD,SAAUD,KAAK8C,8BACflC,OAAQZ,KAAK8C,gCAE7B,kBAAC,EAAD,CAAgBnC,WAAY0D,IAAKC,EAAE,WAAYxD,QAASuD,IAAKC,EAAE,8BAC/ClE,QAASJ,KAAKgC,MAAMG,mBACpBjC,UAAWF,KAAKuD,aAChBtD,SAAUD,KAAKmD,uBACfvC,OAAQZ,KAAKmD,yBAE7B,kBAAC,EAAD,CAAgBxC,WAAY0D,IAAKC,EAAE,WAAYxD,QAASuD,IAAKC,EAAE,+BAC/ClE,QAASJ,KAAKgC,MAAMI,2BACpBlC,UAAWF,KAAKwD,qBAChBvD,SAAUD,KAAKoD,+BACfxC,OAAQZ,KAAKoD,sCArW7C,GAAsCrC,a,gBCHzBoH,EAAb,kDAQI,WAAYzI,GAAQ,IAAD,8BACf,cAAMA,IAPVgC,YAAc,CACVvC,KAAM,MAKS,EAFnBiJ,eAAiB,GAIb,EAAKpG,MAAQ,CACTqG,uBAAwB,EACxBC,+BAAgC,EAChCjG,gBAAiB,KACjBC,eAAgB,EAAKZ,YACrBR,UAAW,EAAKkH,eAChBG,iBAAkB,GAClBC,oBAAqB,GACrBC,aAAc,MACdC,oBAAqBlH,EACrBmH,uBAAwBnH,EACxBoH,cAAe,GAEnB,EAAKjG,iBAAmB,IAAI1B,EAC5B,EAAK4H,iBAAmB,EAAKA,iBAAiBjJ,KAAtB,gBAExB,EAAKkJ,0BAA4B,EAAKA,0BAA0BlJ,KAA/B,gBACjC,EAAKmJ,kCAAoC,EAAKA,kCAAkCnJ,KAAvC,gBACzC,EAAKoJ,gBAAkB,EAAKA,gBAAgBpJ,KAArB,gBACvB,EAAKqJ,wBAA0B,EAAKA,wBAAwBrJ,KAA7B,gBAC/B,EAAKsJ,uBAAyB,EAAKA,uBAAuBtJ,KAA5B,gBAC9B,EAAKuJ,+BAAiC,EAAKA,+BAA+BvJ,KAApC,gBACtC,EAAKyD,oBAAsB,EAAKA,oBAAoBzD,KAAzB,gBAC3B,EAAKwJ,8BAAgC,EAAKA,8BAA8BxJ,KAAnC,gBAzBtB,EARvB,yMAsCkCI,KAAK2C,iBAAiB0G,eAtCxD,OAsCgBnI,EAtChB,OAuCYlB,KAAK8B,SAAS,CACVZ,UAAWA,EACX0H,cAAe1H,EAAU3B,SAzCzC,gDA4CYoF,QAAQC,IAAR,2CA5CZ,sKAiDQ5E,KAAK8B,SAAS,CAACwG,+BAA+B,MAjDtD,6CAoD2BxE,GACnB9D,KAAK8B,SAAS,CACVQ,eAAgBwB,EAChBuE,uBAAuB,MAvDnC,uKA4DQrI,KAAK8B,SAAS,CAAC4G,oBAAqBlH,IA5D5C,kBA+D6BxB,KAAK2C,iBAAiBmC,eAAe9E,KAAKgC,MAAMuG,kBA/D7E,OA+DgBtJ,EA/DhB,QAgEgBqK,EAAetJ,KAAKgC,MAAMd,WACjB1B,KAAK,CAACL,KAAMF,EAAKmC,SAAS,KAEvCpB,KAAK8B,SAAS,CACV4G,oBAAqBlH,EACrBN,UAAWoI,EACXf,iBAAkB,GAClBK,cAAeU,EAAa/J,SAEhCS,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,UAAWC,QAASC,IAAKC,EAAE,cAAeC,OAAQtF,EAAK6B,QAAS0D,KAAMxD,IAzE9G,kDA2EgBgD,EAAW,KAAEA,SAAS/E,KAC1B0F,QAAQC,IAAIZ,GACZW,QAAQC,IAAIP,IAAKC,EAAE,6BAA+BN,GAClDhE,KAAK8B,SAAS,CACV4G,oBAAqBlH,IAEzBxB,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,QAASC,QAASC,IAAKC,EAAE,SAAUC,OAAQP,EAASlD,QAAS0D,KAAMxD,IAjF3G,iSAsFQhB,KAAK8B,SAAS,CAAC6G,uBAAwBnH,IAtF/C,kBAyF6BxB,KAAK2C,iBAAiB4G,oBAAoBvJ,KAAKgC,MAAMwG,qBAzFlF,cAyFgBvJ,EAzFhB,gBA0FkCe,KAAK2C,iBAAiB0G,eA1FxD,OA0FgBnI,EA1FhB,OA2FYlB,KAAK8B,SAAS,CACVZ,UAAWA,EACX0H,cAAe1H,EAAU3B,OACzBoJ,uBAAwBnH,EACxBgH,oBAAqB,KAEzBxI,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,UAAWC,QAASC,IAAKC,EAAE,cAAeC,OAAQtF,EAAK6B,QAAS0D,KAAMxD,IAjG9G,kDAmGgBgD,EAAW,KAAEA,SAAS/E,KAC1B0F,QAAQC,IAAIZ,GACZW,QAAQC,IAAIP,IAAKC,EAAE,gCAAkCN,GACrDhE,KAAK8B,SAAS,CACV6G,uBAAwBnH,IAE5BxB,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,QAASC,QAASC,IAAKC,EAAE,SAAUC,OAAQP,EAASlD,QAAS0D,KAAMxD,IAzG3G,0KA8GQhB,KAAK8B,SAAS,CAAEwG,+BAA+B,MA9GvD,kDAkHQtI,KAAK8B,SAAS,CAAEuG,uBAAuB,MAlH/C,yLAuHgBnJ,EAAUc,KAAKgC,MAAMd,UAAUuD,QAAO,SAAAX,GAAM,OAAK,EAAK9B,MAAMK,gBAAgBwC,SAASf,MAvHrG,SAwHkB9D,KAAK2C,iBAAiB4G,oBAAoBvJ,KAAKgC,MAAMK,iBAxHvE,OA0HYrC,KAAK8B,SAAS,CACVZ,UAAWhC,EACXoJ,+BAA+B,EAC/BjG,gBAAiB,OAGrBrC,KAAKiE,MAAMC,KAAK,CAACC,SAAU,UAAWC,QAASC,IAAKC,EAAE,cAAeC,OAAQF,IAAKC,EAAE,iCAChFE,KAAMxD,IAjItB,gDAmIgBgD,EAAW,KAAEA,SAAS/E,KAC1Be,KAAKiE,MAAMC,KAAK,CAACC,SAAU,QAASC,QAASC,IAAKC,EAAE,SAAUC,OAAqB,OAAbP,EAAA,gBAA6BA,EAASlD,QACxG0D,KAAMxD,IAEVhB,KAAK8B,SAAS,CACVwG,+BAA+B,IAxI/C,uSA+IkBtI,KAAK2C,iBAAiB4G,oBAAoBvJ,KAAKgC,MAAMM,eAAenD,MA/ItF,OAgJgBD,EAAUc,KAAKgC,MAAMd,UAAUuD,QAAO,SAAAX,GAAM,OAAIA,EAAO3E,OAAS,EAAK6C,MAAMM,eAAenD,QAC9Fa,KAAK8B,SAAS,CACVZ,UAAWhC,EACXmJ,uBAAuB,EACvBO,cAAe1J,EAAQK,OACvB+C,eAAgBtC,KAAK0B,cAGzB1B,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,UAAWC,QAASC,IAAKC,EAAE,cAAeC,OAAQF,IAAKC,EAAE,gCAAiCE,KAAMxD,IAxJxI,gDA0JY2D,QAAQC,IAAR,kDACA5E,KAAK8B,SAAS,CACVuG,uBAAuB,IAG3BrI,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,QAASC,QAASC,IAAKC,EAAE,SAAUC,OAAO,GAAD,aAAUC,KAAMxD,IA/JjG,oJAmKoB,IAAD,OACX,OACI,yBAAKX,MAAO,CAACmF,UAAW,SACpB,0BAAM1F,UAAU,qBACZ,uBAAGA,UAAU,iBACb,kBAAC,YAAD,CACIoF,KAAK,SACLO,QAAU,SAACC,GAAD,OAAO,EAAK5D,SAAS,CAACiC,aAAc2B,EAAEC,OAAOC,SACvDC,YAAaxB,IAAKC,EAAE,wBA3K5C,uCAiLqBS,GAAU,IAAD,OAKtB,OACI,6BACI,kBAAC,SAAD,CAAQ1E,MANI,CAChB4E,WAAY,SAKoBC,KAAK,SAASrF,KAAK,kBAAkBC,UAAU,kBACnEC,QAAS,WAAO,EAAKmJ,uBAAuBnE,IAC5CI,QAASd,IAAKC,EAAE,6BAChBc,eAAgB,CAACC,SAAU,YA3LnD,4CAgM2B,IAAD,OAClB,OACI,oCACI,kBAAC,SAAD,CAAQW,MAAO3B,IAAKC,EAAE,OAAQzE,KAAK,YAAYC,UAAU,mBACjDC,QAAS,SAAC2F,GAAD,OAAO,EAAKQ,GAAGC,OAAOT,MACvC,kBAAC,eAAD,CAAcU,IAAK,SAACC,GAAD,OAAQ,EAAKH,GAAKG,IACjC,yBAAKvG,UAAU,gBACX,kBAAC,YAAD,CAAW+F,YAAaxB,IAAKC,EAAE,uBACpBmB,QAAU,SAACC,GAAD,OAAO,EAAK5D,SAAS,CAACyG,iBAAkB7C,EAAEC,OAAOC,WAGtE,kBAAC,SAAD,CAAQI,MAAO3B,IAAKC,EAAE,OAAQzE,KAAK,YAAYC,UAAU,mBACjDmG,SAAuE,MAA5DjG,KAAKgC,MAAMyG,cAAgBzI,KAAKgC,MAAMuG,kBACjDxI,QAASC,KAAKqD,uBAE1B,yBAAKhD,MAAO,CAACkG,UAAW,WACxB,kBAAC,cAAD,CAAaC,KAAK,gBAAgBnG,MAAO,CAACoG,OAAQ,QAASjF,WAAYxB,KAAKgC,MAAM0G,wBAEtF,yBAAKrI,MAAO,CAAC4E,WAAY,WACzB,kBAAC,SAAD,CAAQe,MAAO3B,IAAKC,EAAE,UAAWzE,KAAK,kBAAkBC,UAAU,kBAC1DC,QAASC,KAAKmJ,+BAAgC9I,MAAO,CAACuG,aAAc,mBACpEX,UAAWjG,KAAKgC,MAAMK,kBAAoBrC,KAAKgC,MAAMK,gBAAgB9C,SAC7E,kBAAC,SAAD,CAAQyG,MAAO3B,IAAKC,EAAE,IAAKzE,KAAK,qBAAqBQ,MAAO,CAACuG,aAAc,mBACnE9G,UAAU,kBACVC,QAAS,SAAC2F,GAAD,OAAO,EAAK8D,IAAIrD,OAAOT,MACxC,kBAAC,eAAD,CAAcU,IAAK,SAACC,GAAD,OAAQ,EAAKmD,IAAMnD,IAClC,yBAAKvG,UAAU,gBACX,kBAAC,YAAD,CAAW+F,YAAaxB,IAAKC,EAAE,uBACpBmB,QAAU,SAACC,GAAD,OAAO,EAAK5D,SAAS,CAAC0G,oBAAqB9C,EAAEC,OAAOC,WACzE,kBAAC,SAAD,CAAQI,MAAO3B,IAAKC,EAAE,UAAWzE,KAAK,kBAAkBC,UAAU,kBAC1DmG,SAA0E,MAA/DjG,KAAKgC,MAAMyG,cAAgBzI,KAAKgC,MAAMwG,qBACjDzI,QAASC,KAAKoJ,iCAE1B,yBAAK/I,MAAO,CAACkG,UAAW,WACxB,kBAAC,cAAD,CAAaC,KAAK,gBAAgBnG,MAAO,CAACoG,OAAQ,QAASjF,WAAYxB,KAAKgC,MAAM2G,8BAlOtG,wCAwOsBc,GACd,OACI,kBAAC,cAAD,KACI,kBAAC,MAAD,KACI,kBAAC,SAAD,CAAQtJ,OAAQkE,IAAKC,EAAE,wBAAyBwB,QAAS,EAAGC,YAAa,CAACP,UAAW,WACrF,kBAAC,SAAD,CAAQrF,OAAQsJ,QA7OpC,+BAmPc,IAAD,OACC/I,EAASV,KAAK0G,eACdgD,EAAM1J,KAAK8G,sBAEjB,OACI,6BACI,kBAAC,QAAD,CAAOV,IAAK,SAACC,GAAD,OAAQ,EAAKpC,MAAQoC,KACjC,kBAAC,UAAD,CAAShG,MAAO,CAACsG,OAAQ,OAAQC,aAAc,OAAQC,KAAM6C,IAC7D,kBAAC,YAAD,CAAWhJ,OAAQA,EACRkF,MAAO5F,KAAKgC,MAAMd,UAClB8F,kBAAmBhH,KAAKiH,kBAAkBjH,KAAKgC,MAAM4G,eACrD1B,UAAWlH,KAAKgC,MAAMK,gBACtB8E,kBAAmB,SAACzB,GAAD,OAAO,EAAK5D,SAAS,CAACO,gBAAiBqD,EAAEE,SAC5D9F,UAAU,wBACViE,aAAc/D,KAAKgC,MAAM+B,aACzBqD,aAAc/C,IAAKC,EAAE,oBACrB+C,QAAQ,OACRC,WAAW,EACXC,KAAM,GACNC,mBAAoB,CAAC,GAAG,GAAG,IAC3BC,kBAAkB,uGAClBC,0BAA2BrD,IAAKC,EAAE,QAAU,YAAcD,IAAKC,EAAE,MAAQ,WAAaD,IAAKC,EAAE,MAAQ,kBACrGqD,UAAQ,EACRC,YAAU,EACVC,kBAAkB,GACzB,kBAAC,SAAD,CAAQC,cAAc,WAAWC,YAAa,CAAEzH,MAAO,UACvD,kBAAC,SAAD,CAAQ0H,MAAM,OAAOtH,OAAQ2D,IAAKC,EAAE,YAAa2D,UAAQ,IACzD,kBAAC,SAAD,CAAQvH,OAAQ2D,IAAKC,EAAE,WAAY4D,KAAMlI,KAAK6I,iBAAkBxI,MAAO,CAACC,MAAO,WAGnF,kBAAC,EAAD,CAAgBK,WAAY0D,IAAKC,EAAE,WAAYxD,QAASuD,IAAKC,EAAE,wCAC/ClE,QAASJ,KAAKgC,MAAMqG,sBACpBnI,UAAWF,KAAKgJ,gBAChB/I,SAAUD,KAAK8I,0BACflI,OAAQZ,KAAK8I,4BAE7B,kBAAC,EAAD,CAAgBnI,WAAY0D,IAAKC,EAAE,WAAYxD,QAASuD,IAAKC,EAAE,yCAC/ClE,QAASJ,KAAKgC,MAAMsG,8BACpBpI,UAAWF,KAAKiJ,wBAChBhJ,SAAUD,KAAK+I,kCACfnI,OAAQZ,KAAK+I,yCA3R7C,GAAwChI,a,iCChB3B4I,EAAb,kOAGsB5K,EAAIC,IAAI,eAH9B,uCAG8CC,MAH9C,iLAM2B+C,GAN3B,wEAOQ2C,QAAQC,IAAI5E,KAAK4J,YAAY5H,IAPrC,SASsBjD,EAAI8K,IAAI,cAAe7J,KAAK4J,YAAY5H,IAT9D,uCASuE/C,MATvE,yIAYgB+C,GACR,MAAO,CACH8H,SAAU9H,EAAM8H,SAChBC,SAAU/H,EAAM+H,SAChBC,KAAMhI,EAAMgI,KACZC,KAAMjI,EAAMiI,KACZC,QAASlI,EAAMmI,OACfC,QAASpI,EAAMqI,OACfC,gBAAiBtI,EAAMuI,eACvBC,kBAAmBxI,EAAMyI,gBACzBC,WAAY1I,EAAM0I,WAClBC,KAAM,CACFC,YAAa5I,EAAM6I,WACnBC,mBAAoB9I,EAAM+I,kBAC1BC,aAAchJ,EAAMiJ,YACpBC,cAAelJ,EAAMmJ,YACrBC,kBAAmBpJ,EAAMqJ,sBA5BzC,K,0DCDO,SAASC,GAAUC,GACtB,IAAIC,EAAUC,SAASC,OAAOC,MAAM,IAAIC,OACpC,WAAaL,EAAKM,QAAQ,yBAA0B,QAAU,aAElE,OAAOL,EAAUM,mBAAmBN,EAAQ,SAAMlF,EAG/C,SAASyF,GAAUR,EAAM3F,GAAsB,IAAfoG,EAAc,uDAAJ,IAE7CA,EAAO,cACHC,KAAM,KACHD,IAGKE,mBAAmBC,OAC3BH,EAAQE,QAAUF,EAAQE,QAAQE,eAGtC,IAAIC,EAAgBC,mBAAmBf,GAAQ,IAAMe,mBAAmB1G,GAExE,IAAK,IAAI2G,KAAaP,EAAS,CAC3BK,GAAiB,KAAOE,EACxB,IAAIC,EAAcR,EAAQO,IACN,IAAhBC,IACAH,GAAiB,IAAMG,GAI/Bf,SAASC,OAASW,EC1Bf,IAAMI,GAAY,CACrB,CAAEC,IAAK,UAAWC,KAAM,MACxB,CAAED,IAAK,6CAAWC,KAAM,OAgN5B,IAAMC,GAAY,CACdC,GAAI,CACAC,YAAa,CACT,QAAW,UACX,KAAQ,OACR,kBAAqB,uBACrB,gBAAmB,yBACnB,aAAgB,gBAChB,aAAgB,iBAChB,SAAY,WACZ,SAAY,YACZ,aAAgB,iBAChB,QAAW,UACX,gBAAmB,oBACnB,qBAAwB,kBACxB,KAAQ,GACR,GAAM,KACN,GAAM,KACN,UAAa,YACb,IAAO,MACP,OAAU,SACV,eAAkB,mBAClB,iBAAoB,sBACpB,qBAAwB,kBACxB,KAAQ,OACR,KAAQ,OACR,QAAW,UACX,YAAe,OACf,gBAAmB,oBACnB,aAAgB,iBAChB,eAAkB,WAClB,WAAc,aACd,WAAc,aACd,SAAY,WACZ,KAAQ,OACR,KAAQ,OACR,aAAgB,gBAChB,aAAgB,gBAChB,eAAkB,kBAClB,gBAAmB,oBACnB,WAAc,aACd,KAAQ,OACR,WAAc,cACd,eAAkB,kFAClB,kBAAqB,qBACrB,sBAAyB,qJACzB,YAAe,eACf,gBAAmB,wNACnB,YAAe,gBACf,gBAAmB,6NACnB,gBAAmB,oBACnB,oBAAuB,gNACvB,gBAAmB,gBACnB,MAAS,QACT,mBAAsB,uBACtB,uBAA0B,8BAC1B,MAAS,QACT,SAAY,WACZ,oBAAuB,oBACvB,QAAW,UACX,YAAe,wBACf,SAAY,WACZ,WAAc,aACd,MAAS,QACT,kBAAqB,+BACrB,2BAA8B,iCAC9B,QAAW,WACX,mBAAsB,yCACtB,oBAAuB,kDACvB,2BAA8B,yDAC9B,4BAA+B,8DAC/B,0BAA6B,iCAC7B,8BAAiC,qCACjC,6BAAgC,oCAChC,0BAA6B,4BAC7B,UAAa,aACb,oBAAuB,0BACvB,sCAAyC,uEACzC,qCAAwC,8DACxC,aAAgB,iBAChB,cAAiB,iBACjB,OAAU,SACV,UAAa,cACb,YAAe,aACf,eAAkB,WAClB,WAAc,iBACd,MAAS,QACT,WAAc,kBACd,OAAU,SACV,aAAgB,qBAChB,wBAA2B,iCAC3B,OAAU,WAGlBC,GAAI,CACAD,YAAa,CACT,QAAW,6CACX,KAAQ,yDACR,kBAAqB,uEACrB,gBAAmB,oEACnB,aAAgB,8FAChB,aAAgB,mDAChB,SAAY,8FACZ,SAAY,0BACZ,aAAgB,8EAChB,QAAW,mDACX,gBAAmB,qGACnB,qBAAwB,qGACxB,KAAQ,IACR,GAAM,eACN,GAAM,eACN,UAAa,4EACb,IAAO,mDACP,OAAU,6CACV,eAAkB,yDAClB,iBAAoB,4EACpB,qBAAwB,qIACxB,KAAQ,2BACR,KAAQ,qBACR,QAAW,yDACX,YAAe,qBACf,gBAAmB,qGACnB,aAAgB,mFAChB,eAAkB,8CAClB,WAAc,wFACd,WAAc,+DACd,SAAY,uCACZ,KAAQ,2BACR,KAAQ,2BACR,aAAgB,mFAChB,aAAgB,mFAChB,eAAkB,oGAClB,gBAAmB,2GACnB,WAAc,iFACd,KAAQ,qBACR,WAAc,gEACd,eAAkB,ggBAClB,kBAAqB,2GACrB,sBAAyB,25BACzB,YAAe,4EACf,gBAAmB,0kCACnB,YAAe,yIACf,gBAAmB,sqCACnB,gBAAmB,yIACnB,oBAAuB,moCACvB,gBAAmB,gHACnB,MAAS,mDACT,mBAAsB,0HACtB,uBAA0B,wNAC1B,MAAS,uCACT,SAAY,2BACZ,oBAAuB,4EACvB,QAAW,2EACX,YAAe,2JACf,SAAY,yDACZ,WAAc,iCACd,MAAS,uCACT,kBAAqB,iJACrB,2BAA8B,qLAC9B,QAAW,qEACX,mBAAsB,mRACtB,oBAAuB,mRACvB,2BAA8B,8VAC9B,4BAA+B,8VAC/B,0BAA6B,oKAC7B,8BAAiC,qLACjC,6BAAgC,yKAChC,0BAA6B,uEAC7B,UAAa,kDACb,oBAAuB,6FACvB,sCAAyC,oWACzC,qCAAwC,oWACxC,cAAiB,uEACjB,OAAU,iCACV,UAAa,4EACb,YAAe,0GACf,eAAkB,wCAClB,WAAc,+IACd,MAAS,mDACT,WAAc,wFACd,OAAU,mDACV,aAAgB,iHAChB,wBAA2B,iKAC3B,OAAU,oCAiBf,SAASE,KAIZ,YAHyB1G,IAAtBgF,GAAU,SACTS,GAAU,OAAQ,MAEfT,GAAU,QChZd,IDqYsB2B,GCrYhBC,GAAb,kDAsBI,WAAYxN,GAAQ,IAAD,8BACf,cAAMA,IArBVyN,UAAY,CACRrD,SAAU,WACVC,SAAU,WACVC,KAAM,OACNC,KAAM,OACNE,OAAQ,SACRE,OAAQ,SACRE,eAAgB,iBAChBE,gBAAiB,kBACjBC,WAAY,aACZG,WAAY,aACZE,kBAAmB,oBACnBE,YAAa,cACbE,YAAa,cACbE,gBAAiB,kBACjB+B,kBAAmB,oBACnBC,gBAAiB,kBACjBC,mBAAoB,sBAGL,EAiEnB3L,iBAAmB,WACZC,OAAOC,YAAc,IACpB,EAAKC,SAAS,CAAEyL,cAAc,IAE9B,EAAKzL,SAAS,CAAEyL,cAAc,KAlElC,EAAKvL,MAAQ,CACT8H,SAAU,GACVC,SAAU,GACVC,KAAM,GACNC,KAAM,EACNE,OAAQ,GACRE,OAAQ,GACRE,eAAgB,GAChBE,gBAAiB,GACjBC,WAAY,GACZ8C,eAAe,EACfC,eAAe,EACf5C,YAAY,EACZE,kBAAmB,EACnBE,YAAa,EACbI,gBAAiB,EACjBqC,UAAW,GACXC,UAAW,GACXP,kBAAmB,KACnBC,gBAAiB,KACjBC,mBAAoB,KACpBC,eAAgB3L,OAAOC,WAAa,KAEpC+L,QAAS,CACL9D,SAAU,GACVC,SAAU,GACVC,KAAM,GACNC,KAAM,EACNE,OAAQ,GACRE,OAAQ,GACRE,eAAgB,GAChBE,gBAAiB,GACjBC,WAAY,GAEZG,YAAY,EACZE,kBAAmB,EACnBE,YAAa,EACbE,YAAa,EACbE,gBAAiB,IAIzB,EAAKwC,kBAAoB,IAAIlE,EAE7B,EAAKmE,iBAAmB,EAAKA,iBAAiBlO,KAAtB,gBACxB,EAAKmO,YAAc,EAAKA,YAAYnO,KAAjB,gBACnB,EAAKoO,WAAa,EAAKA,WAAWpO,KAAhB,gBAClB,EAAKqO,UAAY,EAAKA,UAAUrO,KAAf,gBACjB,EAAKsO,MAAQ,EAAKA,MAAMtO,KAAX,gBACb,EAAKuO,eAAiB,EAAKA,eAAevO,KAApB,gBACtB,EAAKwO,mCAAqC,EAAKA,mCAAmCxO,KAAxC,gBAC1C,EAAKyO,2BAA6B,EAAKA,2BAA2BzO,KAAhC,gBAClC,EAAK0O,+BAAiC,EAAKA,+BAA+B1O,KAApC,gBACtC,EAAK2O,aAAe,EAAKA,aAAa3O,KAAlB,gBACpB,EAAK4O,iBAAmB,EAAKA,iBAAiB5O,KAAtB,gBACxB,EAAK6O,aAAe,EAAKA,aAAa7O,KAAlB,gBA1DL,EAtBvB,mEAoFQgC,OAAOiC,oBAAoB,SAAU7D,KAAK2B,oBApFlD,+JAgGQC,OAAO8B,iBAAiB,SAAU1D,KAAK2B,kBACvC3B,KAAK6N,kBAAkBa,gBAAgB9K,MAAK,SAAA3E,GD1G7C,IAA6BgO,EC2GxB,EAAKnL,SAAS,CACVgI,SAAU7K,EAAK6K,SACfC,SAAU9K,EAAK8K,SACfC,KAAM/K,EAAK+K,KACXC,KAAMhL,EAAKgL,KACXE,OAAQlL,EAAI,QACZoL,OAAQpL,EAAI,QACZsL,eAAgBtL,EAAI,gBACpBwL,gBAAiBxL,EAAI,kBACrByL,WAAYzL,EAAKyL,WACjBG,WAAY5L,EAAK0L,KAAL,YACZI,kBAAmB9L,EAAK0L,KAAL,mBACnBM,YAAahM,EAAK0L,KAAL,aACbQ,YAAalM,EAAK0L,KAAL,cACbU,gBAAiBpM,EAAK0L,KAAL,kBACjB+C,WD1HoBT,EC0HW,EAAKvN,MAAMuN,KDzH1C,OAATA,EACQ,CACH,CACI1B,KAAM,QACNoD,QAAS,cACT1B,KAAM,gEAEV,CACI1B,KAAM,QACNoD,QAAS,cACT1B,KAAM,wCAEV,CACI1B,KAAM,QACNoD,QAAS,cACT1B,KAAM,wCAEV,CACI1B,KAAM,QACNoD,QAAS,cACT1B,KAAM,0DAEV,CACI1B,KAAM,QACNoD,QAAS,cACT1B,KAAM,8CAEV,CACI1B,KAAM,eACNoD,QAAS,gBACT1B,KAAM,uHAEV,CACI1B,KAAM,eACNoD,QAAS,gBACT1B,KAAM,0DAEV,CACI1B,KAAM,eACNoD,QAAS,gBACT1B,KAAM,wCAEV,CACI1B,KAAM,aACNoD,QAAS,eACT1B,KAAM,wCAEV,CACI1B,KAAM,aACNoD,QAAS,eACT1B,KAAM,wCAEV,CACI1B,KAAM,aACNoD,QAAS,qBACT1B,KAAM,0DAEV,CACI1B,KAAM,aACNoD,QAAS,oBACT1B,KAAM,wCAEV,CACI1B,KAAM,SACNoD,QAAS,qBACT1B,KAAM,8CAEV,CACI1B,KAAM,SACNoD,QAAS,gBACT1B,KAAM,gEAEV,CACI1B,KAAM,QACNoD,QAAS,kBACT1B,KAAM,qDAEV,CACI1B,KAAM,SACNoD,QAAS,uBACT1B,KAAM,qDAEV,CACI1B,KAAM,SACNoD,QAAS,eACT1B,KAAM,sDAIP,CACH,CACI1B,KAAM,QACNoD,QAAS,cACT1B,KAAM,WAEV,CACI1B,KAAM,QACNoD,QAAS,cACT1B,KAAM,SAEV,CACI1B,KAAM,QACNoD,QAAS,cACT1B,KAAM,SAEV,CACI1B,KAAM,QACNoD,QAAS,cACT1B,KAAM,YAEV,CACI1B,KAAM,QACNoD,QAAS,cACT1B,KAAM,WAEV,CACI1B,KAAM,eACNoD,QAAS,gBACT1B,KAAM,oBAEV,CACI1B,KAAM,eACNoD,QAAS,gBACT1B,KAAM,YAEV,CACI1B,KAAM,eACNoD,QAAS,gBACT1B,KAAM,SAEV,CACI1B,KAAM,aACNoD,QAAS,eACT1B,KAAM,SAEV,CACI1B,KAAM,aACNoD,QAAS,eACT1B,KAAM,SAEV,CACI1B,KAAM,aACNoD,QAAS,qBACT1B,KAAM,YAEV,CACI1B,KAAM,aACNoD,QAAS,oBACT1B,KAAM,SAEV,CACI1B,KAAM,SACNoD,QAAS,qBACT1B,KAAM,WAEV,CACI1B,KAAM,SACNoD,QAAS,gBACT1B,KAAM,aAEV,CACI1B,KAAM,QACNoD,QAAS,kBACT1B,KAAM,iBAEV,CACI1B,KAAM,SACNoD,QAAS,uBACT1B,KAAM,iBAEV,CACI1B,KAAM,SACNoD,QAAS,eACT1B,KAAM,mBCnDNU,UCjIL,CACH,CACIpC,KAAM,cACNqD,OAAQ,iCAEZ,CACIrD,KAAM,QACNqD,OAAQ,yBAEZ,CACIrD,KAAM,aACNqD,OAAQ,yBAEZ,CACIrD,KAAM,MACNqD,OAAQ,mCDoHJhB,QAAS,CACL9D,SAAU7K,EAAK6K,SACfC,SAAU9K,EAAK8K,SACfC,KAAM/K,EAAK+K,KACXC,KAAMhL,EAAKgL,KACXE,OAAQlL,EAAI,QACZoL,OAAQpL,EAAI,QACZsL,eAAgBtL,EAAI,gBACpBwL,gBAAiBxL,EAAI,kBACrByL,WAAYzL,EAAKyL,WAEjBG,WAAY5L,EAAK0L,KAAL,YACZI,kBAAmB9L,EAAK0L,KAAL,mBACnBM,YAAahM,EAAK0L,KAAL,aACbQ,YAAalM,EAAK0L,KAAL,cACbU,gBAAiBpM,EAAK0L,KAAL,wBAnIrC,4RA2I6B3K,KAAK6N,kBAAkBC,iBAAiB9N,KAAKgC,OA3I1E,OA2IgB/C,EA3IhB,OA6IYe,KAAK8B,SAAS,CACV0L,eAAe,EACfC,eAAe,EACfG,QAAS,CACL9D,SAAU9J,KAAKgC,MAAM8H,SACrBC,SAAU/J,KAAKgC,MAAM+H,SACrBC,KAAMhK,KAAKgC,MAAMgI,KACjBC,KAAMjK,KAAKgC,MAAMiI,KACjBE,OAAQnK,KAAKgC,MAAMmI,OACnBE,OAAQrK,KAAKgC,MAAMqI,OACnBE,eAAgBvK,KAAKgC,MAAMuI,eAC3BE,gBAAiBzK,KAAKgC,MAAMyI,gBAC5BC,WAAY1K,KAAKgC,MAAM0I,WAEvBG,WAAY7K,KAAKgC,MAAM6I,WACvBE,kBAAmB/K,KAAKgC,MAAM+I,kBAC9BE,YAAajL,KAAKgC,MAAMiJ,YACxBE,YAAanL,KAAKgC,MAAMmJ,YACxBE,gBAAiBrL,KAAKgC,MAAMqJ,mBAIpCrL,KAAKN,MAAMmP,UACX7O,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,UAAWC,QAAS,aAAcG,OAAQtF,EAAK6B,QAAS0D,KAAMxD,IApKtG,gDAsKgBgD,EAAW,GACf,IACIA,EAAW,KAAEA,SAAS/E,KACxB,MAAO6P,GACL9K,EAAQ,KAGRlD,EAAU,4BACd,IAC4B,MAApBkD,EAASlD,UACTA,EAAUkD,EAASlD,SACzB,MAAO4E,IACTf,QAAQC,IAAI,6BAA+BZ,GAC3ChE,KAAKiE,MAAMC,KAAK,CACZC,SAAU,QACVC,QAAS,QACTG,OAAQzD,EACR0D,KAAMxD,IAvLtB,iJA4LgB+N,EAAS7J,EAAMU,GACvB,IAAIK,EAAWjG,KAAKgO,WAAW9I,EAAMU,GACrCmJ,EAAQvB,cAAgBvH,EACxB8I,EAAQtB,cAAgBxH,EACxBjG,KAAK8B,SAASiN,KAhMtB,gCAmMcC,EAAaC,EAAUrJ,EAAOsJ,GACpC,MAAqB,mBAAVtJ,GACJoJ,IAAgBC,GAIhBD,IAAgBC,EAHRrJ,EAG2BsJ,IAzMlD,iCA4MehK,EAAMU,GACb,GAAqB,kBAAVA,GACP,GAAc,KAAVA,EACA,OAAO,OACR,GAAqB,kBAAVA,GACVA,GAAS,EACT,OAAO,EAGf,IAAIuJ,EAAW,CACXrF,SAAU,GACVC,SAAU,GACVC,KAAM,GACNC,KAAM,EACNE,OAAQ,GACRE,OAAQ,GACRE,eAAgB,GAChBE,gBAAiB,GACjBC,WAAY,GACZG,YAAY,EACZE,kBAAmB,EACnBE,YAAa,EACbE,YAAa,EACbE,gBAAiB,GAkBrB,OAfA8D,EAASrF,SAAW9J,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAUrD,SAAUlE,EAAO5F,KAAKgC,MAAM8H,UACpFqF,EAASpF,SAAW/J,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAUpD,SAAUnE,EAAO5F,KAAKgC,MAAM+H,UACpFoF,EAASnF,KAAOhK,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAUnD,KAAMpE,EAAO5F,KAAKgC,MAAMgI,MAC5EmF,EAASlF,KAAOjK,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAUlD,KAAMrE,EAAO5F,KAAKgC,MAAMiI,MAC5EkF,EAAShF,OAASnK,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAUhD,OAAQvE,EAAO5F,KAAKgC,MAAMmI,QAChFgF,EAAS9E,OAASrK,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAU9C,OAAQzE,EAAO5F,KAAKgC,MAAMqI,QAChF8E,EAAS5E,eAAiBvK,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAU5C,eAAgB3E,EAAO5F,KAAKgC,MAAMuI,gBAChG4E,EAAS1E,gBAAkBzK,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAU1C,gBAAiB7E,EAAO5F,KAAKgC,MAAMyI,iBAClG0E,EAASzE,WAAa1K,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAUzC,WAAY9E,EAAO5F,KAAKgC,MAAM0I,YACxFyE,EAAStE,WAAa7K,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAUtC,WAAYjF,EAAO5F,KAAKgC,MAAM6I,YACxFsE,EAASpE,kBAAoB/K,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAUpC,kBAAmBnF,EAAO5F,KAAKgC,MAAM+I,mBACtGoE,EAASlE,YAAcjL,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAUlC,YAAarF,EAAO5F,KAAKgC,MAAMiJ,aAC1FkE,EAAShE,YAAcnL,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAUhC,YAAavF,EAAO5F,KAAKgC,MAAMmJ,aAC1FgE,EAAS9D,gBAAkBrL,KAAKiO,UAAU/I,EAAMlF,KAAKmN,UAAU9B,gBAAiBzF,EAAO5F,KAAKgC,MAAMqJ,iBAE3F+D,IAAEC,QAAQF,EAAUnP,KAAKgC,MAAM4L,WArP9C,8BAyPQ5N,KAAK8B,SAAS,CACVgI,SAAU9J,KAAKgC,MAAM4L,QAAQ9D,SAC7BC,SAAU/J,KAAKgC,MAAM4L,QAAQ7D,SAC7BC,KAAMhK,KAAKgC,MAAM4L,QAAQ5D,KACzBC,KAAMjK,KAAKgC,MAAM4L,QAAQ3D,KACzBE,OAAQnK,KAAKgC,MAAM4L,QAAQzD,OAC3BE,OAAQrK,KAAKgC,MAAM4L,QAAQvD,OAC3BE,eAAgBvK,KAAKgC,MAAM4L,QAAQrD,eACnCE,gBAAiBzK,KAAKgC,MAAM4L,QAAQnD,gBACpCC,WAAY1K,KAAKgC,MAAM4L,QAAQlD,WAE/BG,WAAY7K,KAAKgC,MAAM4L,QAAQ/C,WAC/BE,kBAAmB/K,KAAKgC,MAAM4L,QAAQ7C,kBACtCE,YAAajL,KAAKgC,MAAM4L,QAAQ3C,YAChCE,YAAanL,KAAKgC,MAAM4L,QAAQzC,YAChCE,gBAAiBrL,KAAKgC,MAAM4L,QAAQvC,gBAEpCmC,eAAe,EACfC,eAAe,MA3Q3B,qCA+QmB6B,GACXtP,KAAKuP,WAAWD,EAAOtP,KAAKgC,MAAM0L,UAAW1N,KAAKmN,UAAUC,kBAAmB,UAhRvF,uCAmRqBkC,GACbtP,KAAKuP,WAAWD,EAAOtP,KAAKgC,MAAM2L,UAAW3N,KAAKmN,UAAUG,mBAAoB,YApRxF,mCAuRiBgC,GACTtP,KAAKuP,WAAWD,EAAOtP,KAAKgC,MAAM2L,UAAW3N,KAAKmN,UAAUE,gBAAiB,UAxRrF,iCA2ReiC,EAAOrQ,EAAMuQ,EAAcC,GAAc,IAAD,OAC/CC,YAAW,WACP,IAAIC,EAIAA,EAHAL,EAAMM,MAAMC,OAAOtQ,OAGRN,EAAKwF,QAAO,SAACqL,GACpB,OAAOA,EAAIL,GAAaM,cAAcC,WAAWV,EAAMM,MAAMG,kBAHzD,YAAO9Q,GAOnB,IAAIgR,EAAS,GACbA,EAAOT,GAAgBG,EACvB,EAAK7N,SAASmO,KACf,OAzSX,yDA4SuCC,GAC/B,OACI,6BACI,0BAAMpQ,UAAU,SAASO,MAAO,CAAC8P,QAAS,UAAWD,EAAK3E,MAC1D,0BAAMlL,MAAO,CAAC4E,WAAY,WAC1B,0BAAMnF,UAAU,SAASO,MAAO,CAAC8P,QAAS,UAAWD,EAAKjD,SAjT1E,iDAsT+BiD,GACvB,OAAOlQ,KAAKuO,aAAa2B,EAAK3E,QAvTtC,qDA0TmC2E,GAC3B,OAAOlQ,KAAKuO,aAAa2B,EAAKtB,UA3TtC,mCA8TiB3P,GACT,OACI,6BACI,0BAAMa,UAAU,SAASO,MAAO,CAAC8P,QAAS,UAAWlR,MAjUrE,+BAsUc,IAAD,OACL,OAAQ,oCACJ,kBAAC,QAAD,CAAOmH,IAAK,SAACC,GAAD,OAAQ,EAAKpC,MAAQoC,KACjC,kBAAC,WAAD,CAAU+J,WAAYpQ,KAAKgC,MAAMuL,aAAc8C,OAAQhM,IAAKC,EAAE,cAAejE,MAAO,CAACkG,UAAW,QAC5F,yBAAKzG,UAAU,UACX,yBAAKA,UAAU,mBACX,kBAAC,WAAD,CAAUsQ,WAAYpQ,KAAKgC,MAAMuL,aAAc8C,OAAQhM,IAAKC,EAAE,cAAejE,MAAO,CAACkG,UAAW,QAC5F,yBAAKzG,UAAU,oBACX,yBAAKA,UAAU,SACX,2BAAOwQ,QAAQ,WAAWxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,aACpF,kBAAC,YAAD,CAAWsB,MAAO5F,KAAKgC,MAAM8H,SAAUyG,aAAa,MAAMC,GAAG,WAAW1Q,UAAU,YACvE2Q,SAAU,SAAC/K,GACP,EAAKqI,YACD,CAACjE,SAAUpE,EAAEC,OAAOC,MAAO4H,eAAe,EAAMC,eAAe,GAC/D,EAAKN,UAAUrD,SAAUpE,EAAEC,OAAOC,QAC1CvF,MAAO,CAACC,MAAO,WAE9B,yBAAKR,UAAU,SACX,2BAAOwQ,QAAQ,WAAWxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,aACpF,kBAAC,WAAD,CAAUsB,MAAO5F,KAAKgC,MAAM+H,SAAUyG,GAAG,WAAW1Q,UAAU,YACpD4Q,UAAU,EACVD,SAAU,SAAC/K,GACP,EAAKqI,YACD,CAAChE,SAAUrE,EAAEC,OAAOC,MAAO4H,eAAe,EAAMC,eAAe,GAC/D,EAAKN,UAAUpD,SAAUrE,EAAEC,OAAOC,QAC1CvF,MAAO,CAACC,MAAO,WAE7B,yBAAKR,UAAU,SACX,2BAAOwQ,QAAQ,OAAOxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,SAChF,kBAAC,YAAD,CAAWsB,MAAO5F,KAAKgC,MAAMgI,KAAMwG,GAAG,OAAO1Q,UAAU,YAAYO,MAAO,CAACC,MAAO,QACvEmQ,SAAU,SAAC/K,GACP,EAAKqI,YACD,CAAC/D,KAAMtE,EAAEC,OAAOC,MAAO4H,eAAe,EAAMC,eAAe,GAC3D,EAAKN,UAAUnD,KAAMtE,EAAEC,OAAOC,WAErD,yBAAK9F,UAAU,SACX,2BAAOwQ,QAAQ,OAAOxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,SAChF,kBAAC,YAAD,CAAWkM,GAAG,OAAO5K,MAAO5F,KAAKgC,MAAMiI,KAAM5J,MAAO,CAACC,MAAO,QACjDmQ,SAAU,SAAC/K,GACP,IAAIiL,EAAUC,SAASlL,EAAEC,OAAOC,MAAO,IACvC+K,EAAUE,MAAMF,GAAW,EAAGA,EAC9B,EAAK5C,YACD,CAAC9D,KAAM0G,EAASnD,eAAe,EAAMC,eAAe,GACpD,EAAKN,UAAUlD,KAAM0G,OAE5C,yBAAK7Q,UAAU,SACX,2BAAOwQ,QAAQ,SAASxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,iBAClF,kBAAC,YAAD,CAAWsB,MAAO5F,KAAKgC,MAAMmI,OAAQqG,GAAG,SAAS1Q,UAAU,YAAYO,MAAO,CAACC,MAAM,QAC1EmQ,SAAU,SAAC/K,GACP,EAAKqI,YACD,CAAC5D,OAAQzE,EAAEC,OAAOC,MAAO4H,eAAe,EAAMC,eAAe,GAC7D,EAAKN,UAAUhD,OAAQzE,EAAEC,OAAOC,WAEvD,yBAAK9F,UAAU,SACX,2BAAOwQ,QAAQ,SAASxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,iBAClF,kBAAC,eAAD,CAAcsB,MAAO5F,KAAKgC,MAAMqI,OAAQmG,GAAG,SAASnQ,MAAO,CAACC,MAAM,QACpDwQ,YAAa9Q,KAAKgC,MAAMqL,gBACxB0D,eAAgB/Q,KAAKyO,aACrBuC,UAAQ,EACRC,aAAcjR,KAAKqO,2BACnBrG,MAAM,OACNyI,SAAU,SAAC/K,GACP,IAAIE,EAAQF,EAAEC,OAAOC,MAAM2F,UACdjF,IAAVV,IACCA,EAAQF,EAAEC,OAAOC,OACrB,EAAKmI,YACD,CAAC1D,OAAQzE,EAAO4H,eAAe,EAAMC,eAAe,GACpD,EAAKN,UAAU9C,OAAQzE,OAEjD,yBAAK9F,UAAU,SACX,2BAAOwQ,QAAQ,iBAAiBxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,mBAC1F,kBAAC,eAAD,CAAcsB,MAAO5F,KAAKgC,MAAMuI,eAAgBiG,GAAG,iBAAiBnQ,MAAO,CAACC,MAAM,QACpEwQ,YAAa9Q,KAAKgC,MAAMoL,kBACxB2D,eAAgB/Q,KAAKmO,eACrB6C,UAAQ,EACRC,aAAcjR,KAAKoO,mCACnBpG,MAAM,OACNyI,SAAU,SAAC/K,GACP,IAAIE,EAAQF,EAAEC,OAAOC,MAAM2F,UACdjF,IAAVV,IACCA,EAAQF,EAAEC,OAAOC,OACrB,EAAKmI,YACD,CAACxD,eAAgB3E,EAAO4H,eAAe,EAAMC,eAAe,GAC5D,EAAKN,UAAU5C,eAAgB3E,OAEzD,yBAAK9F,UAAU,SACX,2BAAOwQ,QAAQ,kBAAkBxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,oBAC3F,kBAAC,eAAD,CAAcsB,MAAO5F,KAAKgC,MAAMyI,gBAAiB+F,GAAG,kBAAkBnQ,MAAO,CAACC,MAAM,QACtEwQ,YAAa9Q,KAAKgC,MAAMsL,mBACxByD,eAAgB/Q,KAAKwO,iBACrBwC,UAAQ,EACRC,aAAcjR,KAAKsO,+BACnBtG,MAAM,SACNyI,SAAU,SAAC/K,GACP,IAAIE,EAAQF,EAAEC,OAAOC,MAAMgJ,YACdtI,IAAVV,IACCA,EAAQF,EAAEC,OAAOC,OACrB,EAAKmI,YACD,CAACtD,gBAAiB7E,EAAO4H,eAAe,EAAMC,eAAe,GAC7D,EAAKN,UAAU1C,gBAAiB7E,OAE1D,yBAAK9F,UAAU,SACX,2BAAOwQ,QAAQ,aAAaxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,eACtF,kBAAC,gBAAD,CAAesB,MAAO5F,KAAKgC,MAAM0I,WAAY8F,GAAG,aAAaU,YAAU,EAACpR,UAAU,YAAYO,MAAO,CAACC,MAAM,QAC7FmQ,SAAU,SAAC/K,GACP,EAAKqI,YACD,CAACrD,WAAYhF,EAAEC,OAAOC,MAAO4H,eAAe,EAAMC,eAAe,GACjE,EAAKN,UAAUzC,WAAYhF,EAAEC,OAAOC,cAK3E,yBAAK9F,UAAU,mBACX,kBAAC,WAAD,CAAUsQ,WAAYpQ,KAAKgC,MAAMuL,aAAc8C,OAAQhM,IAAKC,EAAE,QAASjE,MAAO,CAACkG,UAAW,QACtF,yBAAKzG,UAAU,oBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,oBACX,kBAAC,WAAD,CAAUqR,QAAQ,qBAAqBC,QAASpR,KAAKgC,MAAM6I,WACjD4F,SAAU,SAAC/K,GACP,EAAKqI,YACD,CAAClD,WAAYnF,EAAE0L,QAAS5D,eAAe,EAAMC,eAAe,GAC5D,EAAKN,UAAUtC,WAAYnF,EAAE0L,YAC/C,2BAAOd,QAAQ,sBAAsBjM,IAAKC,EAAE,eAC5C,kBAAC,UAAD,CAASqB,OAAO,wBAChB,0BAAM7F,UAAU,oCACVO,MAAO,CAAC4E,WAAY,QAASpE,SAAU,SACvCwQ,kBAAiBhN,IAAKC,EAAE,sBAGtC,yBAAKxE,UAAU,SACX,2BAAOwQ,QAAQ,oBAAoBxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,sBAC7F,yBAAKxE,UAAU,oBACX,kBAAC,YAAD,CAAW0Q,GAAG,oBAAoB5K,MAAO5F,KAAKgC,MAAM+I,kBAAmB1K,MAAO,CAACC,MAAO,QAC3EmQ,SAAU,SAAC/K,GACP,IAAI4L,EAAuBV,SAASlL,EAAEC,OAAOC,MAAO,IACpD0L,EAAuBT,MAAMS,GAAwB,EAAGA,EACxD,EAAKvD,YACD,CAAChD,kBAAmBuG,EAAsB9D,eAAe,EAAMC,eAAe,GAC9E,EAAKN,UAAUpC,kBAAmBuG,MACrD,kBAAC,UAAD,CAAS3L,OAAO,YAAYN,SAAS,QACrC,0BAAMvF,UAAU,0BACVO,MAAO,CAAC4E,WAAY,QAASpE,SAAU,SACvCwQ,kBAAiBhN,IAAKC,EAAE,6BAGtC,yBAAKxE,UAAU,SACX,2BAAOwQ,QAAQ,cAAcxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,gBACvF,yBAAKxE,UAAU,oBACX,kBAAC,YAAD,CAAW0Q,GAAG,cAAc5K,MAAO5F,KAAKgC,MAAMiJ,YAAa5K,MAAO,CAACC,MAAO,QACnEmQ,SAAU,SAAC/K,GACP,IAAI6L,EAAiBX,SAASlL,EAAEC,OAAOC,MAAO,IAC9C2L,EAAiBV,MAAMU,GAAkB,EAAGA,EAC5C,EAAKxD,YACD,CAAC9C,YAAasG,EAAgB/D,eAAe,EAAMC,eAAe,GAClE,EAAKN,UAAUlC,YAAasG,MAC3C,kBAAC,UAAD,CAAS5L,OAAO,YAAYN,SAAS,QACrC,0BAAMvF,UAAU,0BACVO,MAAO,CAAC4E,WAAY,QAASpE,SAAU,SACvCwQ,kBAAiBhN,IAAKC,EAAE,uBAGtC,yBAAKxE,UAAU,SACX,2BAAOwQ,QAAQ,cAAcxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,gBACvF,yBAAKxE,UAAU,oBACX,kBAAC,YAAD,CAAW0Q,GAAG,cAAc5K,MAAO5F,KAAKgC,MAAMmJ,YAAa9K,MAAO,CAACC,MAAO,QACnEmQ,SAAU,SAAC/K,GACP,IAAI8L,EAAcZ,SAASlL,EAAEC,OAAOC,MAAO,IAC3C4L,EAAcX,MAAMW,GAAe,EAAGA,EACtC,EAAKzD,YACD,CAAC5C,YAAaqG,EAAahE,eAAe,EAAMC,eAAe,GAC/D,EAAKN,UAAUhC,YAAaqG,MAC3C,kBAAC,UAAD,CAAS7L,OAAO,eAAeN,SAAS,QACxC,0BAAMvF,UAAU,6BACVO,MAAO,CAAC4E,WAAY,QAASpE,SAAU,SACvCwQ,kBAAiBhN,IAAKC,EAAE,uBAGtC,yBAAKxE,UAAU,SACX,2BAAOwQ,QAAQ,kBAAkBxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,oBAC3F,yBAAKxE,UAAU,oBACX,kBAAC,YAAD,CAAW0Q,GAAG,kBAAkB5K,MAAO5F,KAAKgC,MAAMqJ,gBAAiBhL,MAAO,CAACC,MAAO,QACvEmQ,SAAU,SAAC/K,GACP,IAAI+L,EAAqBb,SAASlL,EAAEC,OAAOC,MAAO,IAClD6L,EAAqBZ,MAAMY,GAAsB,EAAGA,EACpD,EAAK1D,YACD,CAAC1C,gBAAiBoG,EAAoBjE,eAAe,EAAMC,eAAe,GAC1E,EAAKN,UAAU9B,gBAAiBoG,MACnD,kBAAC,UAAD,CAAS9L,OAAO,eAAeN,SAAS,QACxC,0BAAMvF,UAAU,6BACVO,MAAO,CAAC4E,WAAY,QAASpE,SAAU,SACvCwQ,kBAAiBhN,IAAKC,EAAE,+BAOtD,yBAAKxE,UAAU,oBACX,yBAAKA,UAAU,WAAWO,MAAO,CAACkG,UAAW,QACzC,kBAAC,SAAD,CAAQP,MAAO3B,IAAKC,EAAE,mBAAoBjE,MAAO,CAACqR,MAAO,OAAQpR,MAAO,QAAS2F,SAAUjG,KAAKgC,MAAMwL,cAC9FzN,QAASC,KAAK8N,oBAE1B,yBAAKhO,UAAU,WAAWO,MAAO,CAACkG,UAAW,QACzC,kBAAC,SAAD,CAAQzG,UAAU,mBAAmBkG,MAAO3B,IAAKC,EAAE,SAAUjE,MAAO,CAACqR,MAAO,OAAQpR,MAAO,QACnF2F,SAAUjG,KAAKgC,MAAMyL,cACrB1N,QAASC,KAAKkO,gBAnhB9C,GAAoCnN,aEfvB4Q,GAAb,qOAGsB5S,EAAIC,IAAI,oBAH9B,uCAGmDC,MAHnD,oLAM8B2S,GAN9B,8EAOYC,EAAW,CACXC,eAAgBF,GAR5B,SAWsB7S,EAAI8K,IAAI,mBAAoBgI,GAXlD,uCAW6D5S,MAX7D,yGCUa8S,I,MAAb,kDAWI,WAAYrS,GAAQ,IAAD,8BACf,cAAMA,IAVVsS,sBAAwB,CACpB5R,QAAS,oBACT6R,OAAQ,qBAOO,EAJnBC,aAAe,CACXC,cAAe,iBAGA,EA2BnBxQ,iBAAmB,WACZC,OAAOC,YAAc,IACpB,EAAKC,SAAS,CAAEyL,cAAc,IAE9B,EAAKzL,SAAS,CAAEyL,cAAc,KA5BlC,EAAKvL,MAAQ,CACTmQ,cAAe,EACf3E,eAAe,EACfC,eAAe,EACfF,eAAgB3L,OAAOC,WAAa,KACpCuQ,gBAAiB,EAAKJ,sBAAsBC,OAC5CrE,QAAS,CACLuE,cAAe,IAIvB,EAAKE,qBAAuB,IAAIV,GAEhC,EAAKW,qBAAuB,EAAKA,qBAAqB1S,KAA1B,gBAC5B,EAAKmO,YAAc,EAAKA,YAAYnO,KAAjB,gBACnB,EAAKoO,WAAa,EAAKA,WAAWpO,KAAhB,gBAClB,EAAK2S,aAAe,EAAKA,aAAa3S,KAAlB,gBACpB,EAAKsO,MAAQ,EAAKA,MAAMtO,KAAX,gBApBE,EAXvB,mEAmCQgC,OAAOiC,oBAAoB,SAAU7D,KAAK2B,oBAnClD,+JA+CQC,OAAO8B,iBAAiB,SAAU1D,KAAK2B,kBACvC3B,KAAKqS,qBAAqBG,mBAAmB5O,MAAK,SAAA3E,GAC9C,EAAK6C,SAAS,CACVqQ,cAAelT,EAAI,eACnB2O,QAAS,CACLuE,cAAelT,EAAI,qBApDvC,8RA4D6Be,KAAKqS,qBAAqBI,oBAAoBzS,KAAKgC,MAAMmQ,eA5DtF,OA4DgBlT,EA5DhB,OA8DYe,KAAK8B,SAAS,CACV8L,QAAS,CACLuE,cAAenS,KAAKgC,MAAMmQ,eAE9B3E,eAAe,EACfC,eAAe,IAGnBzN,KAAKiE,MAAMC,KAAK,CACZC,SAAU,UACVC,QAAS,aACTG,OAAQtF,EAAK6B,QACb0D,KAAMxD,IAGVhB,KAAKN,MAAMmP,UA7EvB,gDA+EgB7K,EAAW,KAAEA,SAAS/E,KAC1B0F,QAAQC,IAAIZ,GACZW,QAAQC,IAAI,kCAAoCZ,GAChDhE,KAAKiE,MAAMC,KAAK,CACZC,SAAU,QACVC,QAAS,QACTG,OAAQP,EAASlD,QACjB0D,KAAMxD,IAtFtB,iJA2FgB+N,EAAS7J,EAAMU,GACvB,IAAIK,EAAWjG,KAAKgO,WAAW9I,EAAMU,GACrCmJ,EAAQvB,cAAgBvH,EACxB8I,EAAQtB,cAAgBxH,EACxBjG,KAAK8B,SAASiN,KA/FtB,mCAkGiBC,EAAa0D,EAAa9M,EAAOsJ,GAC1C,OAAOF,IAAgB0D,EAAc9M,EAAQsJ,IAnGrD,iCAsGehK,EAAMU,GACb,GAAqB,kBAAVA,GACP,GAAc,KAAVA,EACA,OAAO,OACR,GAAqB,kBAAVA,GACVA,EAAQ,EACR,OAAO,EAGf,IAAI+M,EAAc,CACdR,cAAe,GAKnB,OAFAQ,EAAYR,cAAgBnS,KAAKuS,aAAarN,EAAMlF,KAAKkS,aAAaC,cAAevM,EAAO5F,KAAKgC,MAAMmQ,eAEhG/C,IAAEC,QAAQsD,EAAa3S,KAAKgC,MAAM4L,WArHjD,8BAyHQ5N,KAAK8B,SAAS,CACVqQ,cAAenS,KAAKgC,MAAM4L,QAAQuE,cAClC3E,eAAe,EACfC,eAAe,MA5H3B,+BAgIc,IAAD,OACL,OAAQ,oCACJ,kBAAC,QAAD,CAAOrH,IAAK,SAACC,GAAD,OAAQ,EAAKpC,MAAQoC,KACjC,kBAAC,WAAD,CAAU+J,WAAYpQ,KAAKgC,MAAMuL,aAAc8C,OAAQhM,IAAKC,EAAE,WAAYjE,MAAO,CAACkG,UAAW,QACzF,yBAAKzG,UAAU,oBACX,yBAAKA,UAAU,SACX,2BAAOwQ,QAAQ,SAASxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,uBAClF,kBAAC,YAAD,CAAWsB,MAAO5F,KAAKgC,MAAMmQ,cAAeS,mBAAiB,cAClDnC,SAAU,SAAC/K,GACP,IAAImN,EAAYjC,SAASlL,EAAEC,OAAOC,MAAO,IACzCiN,EAAYhC,MAAMgC,GAAa,EAAGA,EAClC,EAAK9E,YACD,CAACoE,cAAeU,EAAWrF,eAAe,EAAMC,eAAe,GAC/D,EAAKyE,aAAaC,cAAeU,IAEzCC,QAAS,kBAAM,EAAKhR,SAAS,CAACsQ,gBAAiB,EAAKJ,sBAAsB5R,WAC1E2S,OAAQ,kBAAM,EAAKjR,SAAS,CAACsQ,gBAAiB,EAAKJ,sBAAsBC,UACzE1B,aAAa,MAAMC,GAAG,SAAS1Q,UAAU,YAAYO,MAAO,CAACC,MAAO,UAC/E,2BAAOkQ,GAAG,cAAc1Q,UAAWE,KAAKgC,MAAMoQ,gBACvC/R,MAAO,CAACqR,MAAO,OAAQnL,UAAW,UAAWlC,IAAKC,EAAE,4BAE/D,yBAAKxE,UAAU,QAAQO,MAAO,CAACkG,UAAW,QACtC,kBAAC,SAAD,CAAQP,MAAO3B,IAAKC,EAAE,mBAAoB2B,SAAUjG,KAAKgC,MAAMwL,cACvDnN,MAAO,CAACqR,MAAO,OAAQpR,MAAO,QAC9BP,QAASC,KAAKsS,wBAE1B,yBAAKxS,UAAU,QAAQO,MAAO,CAACkG,UAAW,QACtC,kBAAC,SAAD,CAAQzG,UAAU,mBAAmBkG,MAAO3B,IAAKC,EAAE,SAAU2B,SAAUjG,KAAKgC,MAAMyL,cAC1EpN,MAAO,CAACqR,MAAO,OAAQpR,MAAO,QAC9BP,QAASC,KAAKkO,gBA7J9C,GAAwCnN,cCV3BiS,GAAb,4NAGsBjU,EAAIC,IAAI,YAH9B,uCAG2CC,MAH3C,wG,SCEagU,GAAb,gJAEyBC,GAFzB,8EAGYjU,EAAO,CAAC8K,SAAUmJ,GAH9B,SAIsBnU,EAAI8K,IAAI,YAAa5K,GAJ3C,uCAIkDA,MAJlD,0PAQYkU,EAAY7H,GAAU,cACtBrM,EAAO,CAAC,aAAckU,GATlC,SAUsBzU,IAAM6C,KAAK,UAAWtC,GAV5C,uCAUmDA,MAVnD,wG,SCcamU,I,OAAb,kDAEI,WAAY1T,GAAQ,IAAD,8BACf,cAAMA,IAkBViC,iBAAmB,WACZC,OAAOC,YAAc,IACpB,EAAKC,SAAS,CAAEyL,cAAc,IAE9B,EAAKzL,SAAS,CAAEyL,cAAc,KArBlC,EAAKvL,MAAQ,CACTqR,aAAc,EAAK3T,MAAMuN,KACzBqG,WAAY,EAAK5T,MAAM4T,WACvBC,QAAS,GACTC,kBAAmBhS,EACnB+L,eAAgB3L,OAAOC,WAAa,MAGxC,EAAK4R,aAAe,EAAKA,aAAa7T,KAAlB,gBACpB,EAAK8T,kBAAoB,EAAKA,kBAAkB9T,KAAvB,gBACzB,EAAK+T,gBAAkB,IAAIV,GAZZ,EAFvB,mEAkBQrR,OAAOiC,oBAAoB,SAAU7D,KAAK2B,oBAlBlD,0CA8BQC,OAAO8B,iBAAiB,SAAU1D,KAAK2B,oBA9B/C,mCAiCiB+D,GP8VV,IAAwBuH,EO7VvBjN,KAAK8B,SAAS,CAAEuR,aAAc3N,EAAEE,QP6VTqH,EO5VRvH,EAAEE,MP6VrBvB,IAAKuP,eAAe3G,GACpBlB,GAAU,OAAQkB,GO7VdjN,KAAKN,MAAMmU,YApCnB,4KAyCY7T,KAAK8B,SAAS,CAAC0R,kBAAmBhS,IAzC9C,SA0C6BxB,KAAK2T,gBAAgBG,eAAe9T,KAAKgC,MAAMuR,SA1C5E,OA0CgBtU,EA1ChB,OA2CYe,KAAK8B,SAAS,CAAC0R,kBAAmBhS,IAClCxB,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,UAAWC,QAASC,IAAKC,EAAE,cAAeC,OAAQtF,EAAK6B,QAAS0D,KAAMxD,IAClGhB,KAAKN,MAAMmP,UA7CvB,kDA+CYlK,QAAQC,IAAR,MACIZ,EAAW,KAAEA,SAAS/E,KAC1B0F,QAAQC,IAAIZ,GACZW,QAAQC,IAAIP,IAAKC,EAAE,2BAA6BN,GAChDhE,KAAK8B,SAAS,CACV0R,kBAAmBhS,IAEvBxB,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,QAASC,QAASC,IAAKC,EAAE,SAAUC,OAAQP,EAASlD,QAAS0D,KAAMxD,IAtD3G,+IA0Dc,IAAD,OACL,OAAQ,oCACA,kBAAC,QAAD,CAAOoF,IAAK,SAACC,GAAD,OAAQ,EAAKpC,MAAQoC,KACjC,kBAAC,WAAD,CAAU+J,WAAYpQ,KAAKgC,MAAMuL,aAAc8C,OAAQhM,IAAKC,EAAE,SAAUjE,MAAO,CAACkG,UAAW,QACvF,yBAAKzG,UAAU,oBACX,yBAAKA,UAAU,SACX,2BAAOwQ,QAAQ,SAASxQ,UAAU,YAAYO,MAAO,CAACmF,UAAW,SAAUnB,IAAKC,EAAE,aAClF,kBAAC,YAAD,CAAUjE,MAAO,CAACqR,MAAO,OAAQnL,UAAW,SAAUX,MAAO5F,KAAKgC,MAAMqR,aAC9DrH,QAASS,GAAWgE,SAAUzQ,KAAKyT,aAAcM,YAAY,MAC7DvH,YAAY,OAAO3G,YAAaxB,IAAKC,EAAE,0BAErD,yBAAKxE,UAAU,SACX,kBAAC,aAAD,KACI,kBAAC,gBAAD,CAAcY,OAAQ2D,IAAKC,EAAE,cAAexE,UAAU,cAClD,yBAAKA,UAAU,gBACX,kBAAC,WAAD,CAAUkU,YAAa3P,IAAKC,EAAE,gBACpB2P,UAAW5P,IAAKC,EAAE,QAClB4P,YAAa7P,IAAKC,EAAE,UACpB6P,YAAa9P,IAAKC,EAAE,UACpBmB,QAAU,SAACC,GAAD,OAAO,EAAK5D,SAAS,CAACyR,QAAS7N,EAAEC,OAAOC,WAE5D,kBAAC,SAAD,CAAQI,MAAO3B,IAAKC,EAAE,UAAWzE,KAAK,YAAYC,UAAU,mBACpDmG,SAAmC,KAAxBjG,KAAKgC,MAAMuR,QACtBxT,QAASC,KAAK0T,qBAG1B,yBAAKrT,MAAO,CAACkG,UAAW,WACxB,kBAAC,cAAD,CAAaC,KAAK,gBAAgBnG,MAAO,CAACoG,OAAQ,QAASjF,WAAYxB,KAAKgC,MAAMwR,+BArFtH,GAAuCzS,cCNnCqT,IAAe,EAEbC,GACK,gBADLA,GAEI,wBAGGC,GAAb,kDAEI,WAAY5U,GAAQ,IAAD,8BACf,cAAMA,IAEDsC,MAAQ,CACTuS,kBAAmBH,GACnBI,oBAAqBH,GACrBI,eAAgBpQ,IAAKC,EAAE,YAG3B,EAAKoQ,eAAiB,IAAI1B,GAE1B,EAAK2B,YAAc,EAAKA,YAAY/U,KAAjB,gBACnB,EAAKiU,QAAU,EAAKA,QAAQjU,KAAb,gBACf,EAAKiP,QAAU,EAAKA,QAAQjP,KAAb,gBAbA,EAFvB,0DAmBQwU,IAAe,EACfpU,KAAK8B,SAAS,CACVyS,kBAAmBH,KAEvBxS,OAAOgT,SAAS,CAAEC,IAAK,EAAGC,SAAU,aAvB5C,gCA2BQ9U,KAAK+U,cACL/U,KAAKN,MAAMmU,YA5BnB,yJAgCQ7T,KAAK8B,SAAS,CACV0S,oBAAqBH,KAjCjC,SAmC2BrU,KAAK0U,eAAe7F,UAnC/C,OAmCYoB,EAnCZ,OAoCQjQ,KAAKiE,MAAMC,KAAK,CAAEC,SAAU,UAAWC,QAASC,IAAKC,EAAE,cAAeC,OAAQ0L,EAAOnP,QAAS0D,KAAMxD,IAEpGoT,IAAe,EACF,EACTY,EAAS3Q,IAAKC,EAAE,eAAPD,KAAuCA,IAAKC,EAAE,kBAAoB,MAC/EtE,KAAK8B,SAAS,CACV2S,eAAgBO,IAGpBtF,YAAW,WAAQ9N,OAAOqT,SAASpJ,QAAQ,YAAaqJ,KA7ChE,sIAgDc,IAAD,OACL,OACI,6BACI,kBAAC,QAAD,CAAO9O,IAAK,SAACC,GAAD,OAAQ,EAAKpC,MAAQoC,KAChCrG,KAAKgC,MAAMuS,kBACR,kBAAC,SAAD,CAAQzU,UAAU,qCAAqCO,MAAO,CAACkG,UAAW,SAClE1G,KAAMG,KAAKgC,MAAMwS,oBAAqBxO,MAAOhG,KAAKgC,MAAMyS,eACxD1U,QAASC,KAAK6O,UACrB,8BACL,yBAAK/O,UAAU,sBACX,yBAAKA,UAAU,0BACX,kBAAC,GAAD,CAAgB+O,QAAS7O,KAAK2U,YAAa1H,KAAMjN,KAAKN,MAAMuN,QAEhE,yBAAKnN,UAAU,0BACf,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,SACX,kBAAC,GAAD,CAAoB+O,QAAS7O,KAAK2U,eAEtC,yBAAK7U,UAAU,SACX,kBAAC,GAAD,CAAmB+O,QAAS7O,KAAK2U,YAAad,QAAS7T,KAAK6T,QAAS5G,KAAMjN,KAAKN,MAAMuN,gBAnElH,GAAkClM,aCjBrBoU,GAAb,4NAGsBpW,EAAIC,IAAI,SAH9B,uCAGwCC,MAHxC,wG,SCWamW,GAAb,kDAEI,WAAY1V,GAAQ,IAAD,8BACf,cAAMA,IAyDViC,iBAAmB,WACZC,OAAOC,YAAc,IACpB,EAAKC,SAAS,CAAEuT,UAAU,IAE1B,EAAKvT,SAAS,CAAEuT,UAAU,KA9Df,EAwEnBC,aAAe,WACXC,aAAa,EAAKC,kBAClB,EAAKA,iBAAmB9F,YAAW,WAC/B,EAAK5N,SAAS,CAACiC,aAAc,EAAK/B,MAAMyT,eACzC,MAzEH,EAAKzT,MAAQ,CACT0T,KAAM,KACNC,WAAY,EACZF,WAAY,GACZG,KAAM,KACNC,MAAO,GACPC,cAAe,KACfC,YAAa,GACbC,QAAS,KACTC,QAAS,KACTZ,WAAYzT,OAAOC,WAAa,MAGpC,EAAKqU,WAAa,IAAIf,GACtB,EAAKK,iBAAmB,KACxB,EAAKF,aAAe,EAAKA,aAAa1V,KAAlB,gBAEpB,EAAKuW,eAAiB,EAAKA,eAAevW,KAApB,gBACtB,EAAKwW,iBAAmB,EAAKA,iBAAiBxW,KAAtB,gBACxB,EAAKyW,mBAAqB,EAAKA,mBAAmBzW,KAAxB,gBAC1B,EAAK0W,qBAAuB,EAAKA,qBAAqB1W,KAA1B,gBAC5B,EAAK2W,iBAAmB,EAAKA,iBAAiB3W,KAAtB,gBAxBT,EAFvB,gEA6ByB,IAAD,OAChBgC,OAAO8B,iBAAiB,SAAU1D,KAAK2B,kBACvC3B,KAAKkW,WAAWM,UAAU5S,MAAK,SAAA3E,GAC3B,IAAIwX,EAAW,GAEfxX,EAAKyW,KAAKrU,SAAQ,SAAAuD,GACd6R,EAASjX,KAAKoF,EAAIgR,SAGtB,IAAIc,EAAeD,EAASE,OACxBC,EAAaF,EAAa,GAAGG,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAGA,KAChDC,EAAaN,EAAaA,EAAanX,OAAS,GAAGsX,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAGA,KAEtEf,EAAU,IAAI7J,KAAKyK,EAAW,GAAIA,EAAW,GAAG,EAAGA,EAAW,IAC9DX,EAAU,IAAI9J,KAAK6K,EAAW,GAAIA,EAAW,GAAG,EAAGA,EAAW,IAElE,EAAKlV,SAAS,CACV4T,KAAMzW,EAAKyW,KACXC,WAAY1W,EAAKyW,KAAKnW,OACtBsW,MAAO5W,EAAK4W,MACZG,QAASA,EACTC,QAASA,SAlDzB,6CAyDQrU,OAAOiC,oBAAoB,SAAU7D,KAAK2B,oBAzDlD,yCAoEwBsV,EAAWC,GACxBA,EAAUzB,aAAezV,KAAKgC,MAAMyT,YACnCzV,KAAKsV,iBAtEjB,qCAiFmBrW,GACX,OACI,yBAAKa,UAAU,SAASO,MAAO,CAAC8P,QAAS,QAASgH,QAAS,iBACvD,yBAAK9W,MAAO,CAAC+W,WAAY,OAAQvW,SAAU,SAAU5B,EAAK2W,SApF1E,uCA0FQ,OAAQ,uCA1FhB,uCA6FqB7Q,GACb,MAAqB,UAAjBA,EAAQG,KAEJ,yBAAK7E,MAAO,CAACG,MAAO,UAAW4W,WAAY,SACtCrS,EAAQG,MAIb,yBAAK7E,MAAO,CAACG,MAAO,UAAW4W,WAAY,SACtCrS,EAAQG,QAtG7B,qCA4GoB,IVkEgB+H,EUlEjB,OACX,OACI,yBAAK5M,MAAO,CAACmF,UAAW,SACpB,0BAAM1F,UAAU,qBACZ,uBAAGA,UAAU,iBACb,kBAAC,YAAD,CACIoF,KAAK,SACLO,QAAU,SAACC,GAAD,OAAO,EAAK5D,SAAS,CAAC2T,WAAY/P,EAAEC,OAAOC,SACrDC,YAAaxB,IAAKC,EAAE,mBAE3BtE,KAAKgC,MAAMqT,SAAW,8BACvB,kBAAC,YAAD,CAAUjP,IAAK,SAACiR,GAAD,OAAS,EAAKA,IAAMA,GACzBC,WAAW,WAAWzR,YAAaxB,IAAKC,EAAE,aAC1CsB,MAAO5F,KAAKgC,MAAM4T,KAClBvV,MAAO,CAACC,MAAO,QAAS2E,WAAY,QAASO,UAAW,QACxDwQ,QAAShW,KAAKgC,MAAMgU,QACpBC,QAASjW,KAAKgC,MAAMiU,QACpBsB,eAAa,EACbC,eAAa,EACbC,QV+CUxK,EU/CkBjN,KAAKN,MAAMuN,KVgDjD,OAATA,EACQ,CACHyK,eAAgB,EAChBC,SAAU,CAAC,qEAAe,6CAAW,iCAAS,6CAAW,6CAAW,6CAAW,sEAC/EC,cAAe,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBACpDC,YAAa,CAAC,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,UAC5CC,WAAY,CAAC,uCAAU,6CAAW,2BAAQ,uCAAU,qBAAO,2BAAQ,2BAAQ,uCAAU,mDAAY,6CAAW,uCAAU,8CACtHC,gBAAiB,CAAC,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,sBAC/FC,MAAO,6CACPC,MAAO,mDACPC,WAAY,gBAEN,CACVR,eAAgB,EAChBC,SAAU,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC7EC,cAAe,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC1DC,YAAa,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAC5CC,WAAY,CAAE,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YACjHC,gBAAiB,CAAE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAM,MAAO,MAAO,MAAO,MAAO,MAAO,OAC/FC,MAAO,QACPC,MAAO,QACPC,WAAY,OUpEMzH,SAAU,SAAC/K,GACP,EAAK5D,SAAS,CAAC8T,KAAMlQ,EAAEE,QACvB,IACI,IAAIuS,EAAKzS,EAAEE,MACPwS,EAAMD,EAAGE,UACTC,EAAQF,EAAM,GAAM,EAAI,IAAM,GAG9BG,EAAM,CAACH,EAFCD,EAAGK,WAAa,EACjBL,EAAGM,eACeC,KAAK,KAClC,EAAKpC,qBAAqBgC,EAAOC,GACnC,MAAOI,GACL,EAAKrC,qBAAqB,WA3I5D,wCAmJsBX,GACd,IAAIiD,EAAMvU,IAAKC,EAAE,kBAAoB,IAAMqR,EAC3C,OACI,kBAAC,cAAD,KACI,kBAAC,MAAD,KACI,kBAAC,SAAD,CAAQxV,OAAQyY,EAAK9S,QAAS,EAAGC,YAAa,CAACP,UAAW,eAxJ9E,yCA+JQ,OACI,kBAAC,YAAD,CAAUI,MAAO5F,KAAKgC,MAAM8T,cAAe9J,QAAShM,KAAKgC,MAAM6T,MAAOpF,SAAUzQ,KAAKqW,mBAC3EpF,aAAcjR,KAAKuW,iBACnBsC,WAAS,EACThT,YAAaxB,IAAKC,EAAE,eACpBxE,UAAU,sBApKhC,4CAyK2B,IAAD,OAClB,OACQ,kBAAC,YAAD,CAAWO,MAAO,CAACC,MAAO,QACnBmF,QAAS,SAACC,GAAD,OAAO,EAAK4Q,qBAAqB5Q,EAAEC,OAAOC,QACnD9F,UAAU,kBACV+F,YAAaxB,IAAKC,EAAE,uBA9K3C,uCAkLqBwU,GACb,MAAe,UAAXA,EAEI,0BAAMzY,MAAO,CAACG,MAAO,UAAW4W,WAAY,SACvC0B,GAIL,0BAAMzY,MAAO,CAACG,MAAO,UAAW4W,WAAY,SACvC0B,KA3LrB,yCAiMuBxJ,GACftP,KAAKmY,GAAG1T,OAAO6K,EAAM1J,MAAO,OAAQ,UACpC5F,KAAK8B,SAAS,CAACgU,cAAexG,EAAM1J,UAnM5C,2CAsMyBN,GACjBtF,KAAKmY,GAAG1T,OAAOa,EAAM,MAAO,cAvMpC,+BA0Mc,IAAD,OACC5E,EAASV,KAAK0G,eACdqS,EAAa/Y,KAAKgZ,mBAClBC,EAAYjZ,KAAKkZ,sBAEvB,OACI,6BACI,kBAAC,YAAD,CAAW9S,IAAK,SAACC,GAAD,OAAQ,EAAK8R,GAAK9R,GACvB3F,OAAQA,EACRkF,MAAO5F,KAAKgC,MAAM0T,KAClByD,aAAa,YACbC,WAAW,OACXhS,aAAc/C,IAAKC,EAAE,gBACrB+U,SAAS,SACTC,UAAU,OACVvV,aAAc/D,KAAKgC,MAAM+B,aACzBwV,uBAAwBvZ,KAAKmW,eAC7BqD,uBAAwBxZ,KAAKyZ,eAC7BzS,kBAAmBhH,KAAKiH,kBAAkBjH,KAAKgC,MAAM2T,YACrD+D,UAAW,EACXpS,WAAW,EACXC,KAAM,GACNC,mBAAoB,CAAC,GAAG,GAAG,IAC3BI,YAAU,EACVH,kBAAkB,uGAClBC,0BAA2BrD,IAAKC,EAAE,QAAU,YAAcD,IAAKC,EAAE,MAAQ,WAAaD,IAAKC,EAAE,MAAQ,mBAC5G,kBAAC,SAAD,CAAQ5D,OAAO,IAAIwH,KAAM,SAACjJ,EAAMS,GAAP,OAAiBA,EAAMia,SAAW,GAAGtZ,MAAO,CAACC,MAAO,KAAME,MAAM,UACzF,kBAAC,SAAD,CAAQwH,MAAM,OAAOE,KAAMlI,KAAKoW,iBAAkB1V,OAAQ2D,IAAKC,EAAE,QAASjE,MAAO,CAACC,MAAO,OACjFmE,QAAM,EACNmV,cAAeb,IACvB,kBAAC,SAAD,CAAQ/Q,MAAM,MAAMtH,OAAQ2D,IAAKC,EAAE,WAAYjE,MAAO,CAACC,MAAO,MAAOuZ,SAAU,cACvEpV,QAASzE,KAAKgC,MAAMqT,SACpBuE,cAAeX,UA1O3C,GAAmClY,aCD7B+Y,I,yDAgCF,WAAYpa,GAAQ,IAAD,uBACf,cAAMA,IA/BVqa,MAAQ,CAAE,CACN/T,MAAO3B,IAAKC,EAAE,WACd0V,SAAU,UACVna,KAAM,oBACNoM,KAAM,WACNgO,QAAS,WAAQrY,OAAOqT,SAASiF,KAAO,aACzC,CACClU,MAAO3B,IAAKC,EAAE,aACd0V,SAAU,YACVna,KAAM,kBACNoM,KAAM,aACNgO,QAAS,WAAQrY,OAAOqT,SAASiF,KAAO,eACzC,CAKClU,MAAO3B,IAAKC,EAAE,QACd0V,SAAU,OACVna,KAAM,sBACNoM,KAAM,QACNgO,QAAS,WAAQrY,OAAOqT,SAASiF,KAAO,UACzC,CACClU,MAAO3B,IAAKC,EAAE,YACd0V,SAAU,WACVna,KAAM,kBACNoM,KAAM,YACNgO,QAAS,WAAQrY,OAAOqT,SAASiF,KAAO,eAKxC,EAAKrG,QAAU,EAAKA,QAAQjU,KAAb,gBACf,EAAKua,OAASC,sBAEd,IAAIC,EAAU,EAAKN,MAAM,GACzB,QAAgCzT,IAA7BgF,GAAU,eAA8B,CACvC,IAAIgP,EAAchP,GAAU,eAC5B+O,EAAU,EAAKN,MAAMQ,MAAK,SAAC7U,EAAGpG,EAAGkb,GAC7B,OAAG9U,EAAEsU,WAAaM,GACP5U,KAVJ,OAgBf,EAAK1D,MAAQ,CACTyY,WAAYJ,EACZK,QAASrW,IAAKC,EAAE+V,EAAQL,WAlBb,E,sDAwBfha,KAAK+U,cACL/U,KAAK+Z,MAAM1Y,SAAQ,SAAAsZ,GAAUA,EAAK3U,MAAQ3B,IAAKC,EAAEqW,EAAKX,aACtDha,KAAK8B,SAAS,CACV4Y,QAASrW,IAAKC,EAAEtE,KAAKgC,MAAMyY,WAAWT,c,qCAI/B/N,GACX,IAAI2O,EAAc5a,KAAK+Z,MAAMtV,QAAO,SAAAkW,GAAU,OAAOA,EAAK1O,OAASA,KAEnEjM,KAAK8B,SAAS,CACV2Y,WAAYG,EAAY,GACxBF,QAASrW,IAAKC,EAAEsW,EAAY,GAAGZ,c,+BAI7B,IAAD,OACL,OACI,oCACI,0BAAMxJ,GAAG,UAAUnQ,MAAO,CAACQ,SAAU,SAAUb,KAAKgC,MAAM0Y,SAC1D,kBAAC,UAAD,CAASlK,GAAG,YAAYpK,IAAKpG,KAAKma,OACzBU,YAAa,SAACnV,GACVqG,GAAU,cAAerG,EAAEE,MAAMoU,UACjCjO,GAAU,WAAYrG,EAAEE,MAAMqG,MAC9B,EAAKnK,SAAS,CAAC2Y,WAAY/U,EAAEE,SAEjC6U,WAAYza,KAAKgC,MAAMyY,WAAYK,MAAO9a,KAAK+Z,a,GAlF3ChZ,cAuFhBga,GAAb,kDAEI,WAAYrb,GAAQ,IAAD,8BACf,cAAMA,IACDsb,SAAWC,IAAMb,YACtB,EAAKvG,QAAU,EAAKA,QAAQjU,KAAb,gBAHA,EAFvB,sDASQI,KAAKgb,SAASpN,QAAQiG,YAT9B,qCAYmB5H,GACXjM,KAAKgb,SAASpN,QAAQsN,eAAejP,KAb7C,+BAgBc,IAAD,OACL,OACI,kBAAC,IAAD,KACI,kBAAC,GAAD,CAAgB7F,IAAKpG,KAAKgb,WAC1B,kBAAC,IAAD,CAAOG,IAAI,WAAWC,OAAK,EAACnP,KAAK,WAAWoP,UAAW,kBAAM,kBAAC,EAAD,SAC7D,kBAAC,IAAD,CAAOF,IAAI,aAAaC,OAAK,EAACnP,KAAK,aAAaoP,UAAW,kBAAM,kBAAC,EAAD,SAEjE,kBAAC,IAAD,CAAOF,IAAI,QAAQC,OAAK,EAACnP,KAAK,QAAQoP,UAAW,kBAAM,kBAAC,GAAD,CAAepO,KAAMD,UAC5E,kBAAC,IAAD,CAAOmO,IAAI,YAAYC,OAAK,EAACnP,KAAK,YAC3BoP,UAAW,kBAAM,kBAAC,GAAD,CAAcxH,QAAS,EAAKA,QAAS5G,KAAMD,eAzBnF,GAA+BjM,a,6BC3FlBua,GAAb,kDAEI,WAAY5b,GAAQ,IAAD,8BACf,cAAMA,IAED6b,YAAc,EAAKA,YAAY3b,KAAjB,gBACnB,EAAKiU,QAAU,EAAKA,QAAQjU,KAAb,gBACf,EAAK4b,OAAS,EAAKA,OAAO5b,KAAZ,gBACd,EAAK+T,gBAAkB,IAAIV,GANZ,EAFvB,wDAWgBhH,GACRF,GAAU,cAAeE,EAAKwP,OAAO,IACrC1P,GAAU,WAAYE,GACtBrK,OAAOqT,SAASiF,KAAOjO,EACvBjM,KAAKN,MAAMgc,cAAczP,KAfjC,yJAmBcjM,KAAK2T,gBAAgB6H,SAnBnC,OAoBQ5Z,OAAOqT,SAASpJ,QAAQ,UApBhC,sIAwBQ7L,KAAK+U,gBAxBb,+BA2Bc,IAAD,OACL,OACI,kBAAC,WAAD,CAAS3U,QAASJ,KAAKN,MAAMic,cAAe/a,OAAQZ,KAAKN,MAAMgc,eAC3D,yBAAKE,IAAKC,KAASC,IAAI,GAAGxb,MAAM,KAAKmG,OAAO,OAC5C,wBAAIpG,MAAO,CAAE+W,WAAY,WAAzB,eACA,yBAAKtX,UAAU,oBACX,kBAAC,SAAD,CAAQD,KAAK,oBAAoBmG,MAAO3B,IAAKC,EAAE,WACvCvE,QAAS,kBAAM,EAAKwb,YAAY,eACxC,kBAAC,SAAD,CAAQ1b,KAAK,kBAAkBmG,MAAO3B,IAAKC,EAAE,aAAcjE,MAAO,CAACkG,UAAW,SACtExG,QAAS,kBAAM,EAAKwb,YAAY,iBACxC,kBAAC,SAAD,CAAQ1b,KAAK,sBAAsBmG,MAAO3B,IAAKC,EAAE,QAASjE,MAAO,CAACkG,UAAW,SACrExG,QAAS,kBAAM,EAAKwb,YAAY,YACxC,kBAAC,SAAD,CAAQ1b,KAAK,kBAAkBmG,MAAO3B,IAAKC,EAAE,YAAajE,MAAO,CAACkG,UAAW,SACrExG,QAAS,kBAAM,EAAKwb,YAAY,gBACxC,kBAAC,SAAD,CAAQ1b,KAAK,uBAAuBmG,MAAO3B,IAAKC,EAAE,UAAWxE,UAAU,qBAC/DO,MAAO,CAACkG,UAAW,SAAUxG,QAAS,WAAO,EAAKyb,SAAS5X,MAAK,SAAAmY,GAAC,OAAIpX,QAAQC,IAAImX,eA1C7G,GAAiChb,aCJpBib,GAAb,kDAEI,WAAYtc,GAAQ,IAAD,8BACf,cAAMA,IAEDsC,MAAQ,CACTia,kBAAkB,GAGtB,EAAKP,cAAgB,EAAKA,cAAc9b,KAAnB,gBAPN,EAFvB,0DAYkBqM,GACVjM,KAAK8B,SAAS,CACVma,kBAAkB,SAEV3V,IAAT2F,GACCjM,KAAKN,MAAMwc,WAAWtO,QAAQsN,eAAejP,KAjBzD,+BAqBc,IAAD,OACL,OACI,6BACI,kBAAC,GAAD,CAAa4H,QAAS7T,KAAKN,MAAMmU,QAAS8H,cAAe3b,KAAKgC,MAAMia,iBAAkBP,cAAe1b,KAAK0b,gBAC1G,kBAAC,SAAD,CAAQ7b,KAAK,aAAaC,UAAU,qBAC5BO,MAAO,CAAEgF,SAAU,SAAUJ,WAAY,QAASyM,MAAO,QACzD3R,QAAS,WAAM,EAAK+B,SAAS,CAACma,kBAAkB,YA3BxE,GAAmClb,aCO7BkM,GAAOD,Kd2YgBC,Gc1YhBA,Gd2YT5I,IAAK8X,KAAK,CACNvP,aACAF,IAAKO,Kc3Yb,IAAImP,GAAW9Q,GAAU,YAErB1J,OAAOqT,SAASiF,UADL5T,IAAZ8V,GACwBA,GAEA,UAiBZC,OAff,WACI,IAAIH,EAAajB,IAAMb,YACvB,OACI,yBAAKta,UAAU,OACX,kBAAC,GAAD,CAAeoc,WAAYA,IAC3B,yBAAK7b,MAAO,CAACic,OAAQ,QACjB,yBAAKV,IAAKC,IAASC,IAAI,OAAOxb,MAAM,MAAMmG,OAAO,SAErD,yBAAK3G,UAAU,SAASO,MAAO,CAAC8P,QAAS,QAASvJ,aAAc,QAC5D,kBAAC,GAAD,CAAWR,IAAK8V,OCjBZK,QACW,cAA7B3a,OAAOqT,SAASuH,UAEe,UAA7B5a,OAAOqT,SAASuH,UAEhB5a,OAAOqT,SAASuH,SAAS7Q,MACvB,2DCZN8Q,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFlR,SAASmR,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnZ,MAAK,SAAAoZ,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxY,QAAQwY,MAAMA,EAAMrc,a,wCEzI5Bsc,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.1ebf4f87.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: \"/admins/commands\",\n    responseType: \"json\"\n});","import API from './API';\n\nexport class ClientService {\n\n    async getClients() {\n        return (await API.get(\"/clients\")).data.clients;\n    }\n\n    async kickClients(imei) {\n        if(typeof imei === \"string\")\n            return (await API.delete(\"/clients?imei=\" + imei)).data;\n        else {\n            let imeiArr = [];\n            for(let i = 0; i < imei.length; i++) {\n                imeiArr.push(imei[i].imei);\n            }\n\n            return (await API.delete(\"/clients?imeiList=\" + imeiArr)).data;\n        }\n    }\n\n    async searchImei(imei) {\n        return (await API.get(\"/imei/hash?pure=\" + imei)).data;\n    }\n}\n","import React from \"react\";\nimport {Component} from \"react\";\nimport {Dialog} from \"primereact/dialog\";\nimport {Button} from \"primereact/button\";\n\nexport class DialogQuestion extends Component {\n\n    constructor(props) {\n        super(props);\n        this.renderFooter = this.renderFooter.bind(this);\n    }\n\n    renderFooter() {\n        return (\n            <>\n                <Button icon=\"pi pi-times\" className=\"p-button-text\" onClick={this.props.onCancel}/>\n                <Button icon=\"pi pi-check\" className=\"p-button-text\" onClick={this.props.onConfirm}/>\n            </>\n        );\n    }\n\n    render() {\n        const footer = this.renderFooter();\n\n        return (\n            <Dialog visible={this.props.visible}\n                    style={{ width: '30vw', backgroundColor: \"#007ad9\", color:\"white\" }}\n                    modal\n                    header={this.props.headerText}\n                    footer={footer}\n                    onHide={this.props.onHide}>\n                <div>\n                    <div className=\"pi pi-question-circle\" style={{fontSize: \"1.5em\"}}/>\n                    <br/>\n                    {this.props.message}\n                </div>\n            </Dialog>\n        );\n    }\n}","\nexport const appSettings = {\n    TOAST_LIVE: 5000\n};","import API from \"../service/API\";\n\nexport class BlacklistService {\n\n    async getBlacklist() {\n        let blacklist = (await API.get(\"/blacklist\")).data.blacklist;\n        let blJson = [];\n        for(let i = 0; i < blacklist.length; i++) {\n            blJson.push({imei: blacklist[i]});\n        }\n        return blJson;\n    }\n\n    async addToBlacklist(imei) {\n        let data = { imeilist: [] };\n        if(typeof imei === \"string\")\n            data.imeilist.push(imei);\n        else {\n            imei.forEach(_imei => {\n                data.imeilist.push(_imei.imei);\n            });\n        }\n\n        return (await API.post(\"/blacklist\", data)).data;\n    }\n\n    async removeFromBlacklist(imei) {\n        if(typeof imei === \"string\")\n            return (await API.delete('/blacklist?imei=' + imei)).data;\n        else {\n            let imeiArr = [];\n            for(let i = 0; i < imei.length; i++) {\n                imeiArr.push(imei[i].imei);\n            }\n            return (await API.delete('/blacklist?imeiList=' + imeiArr)).data;\n        }\n    }\n}\n","\nexport const visibility = {\n    hidden: \"hidden\",\n    visible: \"visible\"\n};","import React from 'react';\nimport {Component} from \"react\";\nimport {ClientService} from \"../service/ClientService\";\nimport {DataTable} from \"primereact/datatable\";\nimport {Column} from \"primereact/column\";\nimport { Button } from 'primereact/button';\nimport 'primeicons/primeicons.css';\nimport {InputText} from \"primereact/inputtext\";\nimport {ColumnGroup} from \"primereact/columngroup\";\nimport {Row} from \"primereact/row\";\nimport {Toolbar} from \"primereact/toolbar\";\nimport {DialogQuestion} from \"./DialogQuestion\";\nimport {Toast} from \"primereact/toast\";\nimport {appSettings} from \"./AppSettings\";\nimport {BlacklistService} from \"./BlacklistService\";\nimport i18n from \"i18next\";\nimport {ProgressBar} from \"primereact/progressbar\";\nimport {OverlayPanel} from \"primereact/overlaypanel\";\nimport {CopyToClipboard} from \"react-copy-to-clipboard\";\nimport {visibility} from \"../utils/CssProps\";\n\nexport class DataTableClients extends Component {\n\n    emptyClient = {\n        imei: null\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            kickClientDialog: false,\n            kickClientsDialogSelected: false,\n            addBlacklistDialog: false,\n            addBlacklistDialogSelected: false,\n            selectedClients: null,\n            selectedClient: this.emptyClient,\n            clients: null,\n            searchImei: \"\",\n            searchImeiLoading: visibility.hidden,\n            amountClients: 0,\n            showBtnLabel: window.innerWidth > 600\n        };\n\n        this.clientsService = new ClientService();\n        this.blacklistService = new BlacklistService();\n        this.renderButtons = this.renderButtons.bind(this);\n\n        this.hideKickClientDialog = this.hideKickClientDialog.bind(this);\n        this.hideKickClientsDialogSelected = this.hideKickClientsDialogSelected.bind(this);\n        this.confirmKickClient = this.confirmKickClient.bind(this);\n        this.confirmKickClientsSelected = this.confirmKickClientsSelected.bind(this);\n        this.kickClient = this.kickClient.bind(this);\n        this.kickClientsSelected = this.kickClientsSelected.bind(this);\n\n        this.hideAddBlacklistDialog = this.hideAddBlacklistDialog.bind(this);\n        this.hideAddBlacklistDialogSelected = this.hideAddBlacklistDialogSelected.bind(this);\n        this.confirmAddBlacklist = this.confirmAddBlacklist.bind(this);\n        this.confirmAddBlacklistSelected = this.confirmAddBlacklistSelected.bind(this);\n        this.addBlacklist = this.addBlacklist.bind(this);\n        this.addBlacklistSelected = this.addBlacklistSelected.bind(this);\n        this.confirmSearchImei = this.confirmSearchImei.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.updateDimensions);\n        this.clientsService.getClients().then(data => {\n            this.setState({\n                amountClients: data.length,\n                clients: data\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n\n    updateDimensions = () => {\n        if(window.innerWidth <= 600) {\n            this.setState({ showBtnLabel: false });\n        } else {\n            this.setState({ showBtnLabel: true });\n        }\n    };\n\n    hideKickClientDialog() {\n        this.setState({ kickClientDialog: false });\n    }\n\n    hideKickClientsDialogSelected() {\n        this.setState({ kickClientsDialogSelected: false });\n    }\n\n    confirmKickClient(client) {\n        this.setState({\n            selectedClient: client,\n            kickClientDialog: true\n        });\n    }\n\n    confirmKickClientsSelected() {\n        this.setState({\n            kickClientsDialogSelected: true\n        });\n    }\n\n    async confirmSearchImei() {\n        try {\n            this.setState({ searchImeiLoading: visibility.visible });\n            let data = await this.clientsService.searchImei(this.state.searchImei);\n            this.setState({ searchImeiLoading: visibility.hidden, globalFilter: data[\"hash_imei\"] });\n        } catch (e) {\n            let response = e.response.data;\n            this.setState({ searchImeiLoading: visibility.hidden });\n            this.toast.show({ severity: 'error', summary: i18n.t(\"error\"), detail: response.message, life: appSettings.TOAST_LIVE });\n        }\n    }\n\n    async kickClient() {\n        try {\n            let clients = this.state.clients.filter(client => client.imei !== this.state.selectedClient.imei);\n            let data = await this.clientsService.kickClients(this.state.selectedClient.imei);\n            this.setState({\n                clients: clients,\n                kickClientDialog: false,\n                selectedClient: this.emptyClient,\n                amountClients: clients.length\n            });\n            this.toast.show({ severity: 'success', summary: i18n.t(\"successful\"), detail: data.message, life: appSettings.TOAST_LIVE });\n        } catch (e) {\n            let response = e.response.data;\n            console.log(i18n.t(\"kickRequestFailed\") + response);\n            this.setState({\n                kickClientDialog: false\n            });\n            this.toast.show({ severity: 'error', summary: i18n.t(\"error\"), detail: response.message, life: appSettings.TOAST_LIVE });\n        }\n    }\n\n    async kickClientsSelected() {\n        try {\n            let clients = this.state.clients.filter(client => !this.state.selectedClients.includes(client));\n            let data = await this.clientsService.kickClients(this.state.selectedClients);\n\n            this.setState({\n                clients: clients,\n                kickClientsDialogSelected: false,\n                selectedClient: this.emptyClient,\n                amountClients: clients.length\n            });\n\n            this.toast.show({\n                severity: 'success',\n                summary: i18n.t(\"successful\"),\n                detail: data.message,\n                life: appSettings.TOAST_LIVE\n            });\n        } catch (e) {\n            this.setState({\n                kickClientsDialogSelected: false\n            });\n            let response = e.response.data;\n            this.toast.show({ severity: 'error', summary: i18n.t(\"error\"), detail: response.message, life: appSettings.TOAST_LIVE });\n        }\n    }\n\n    hideAddBlacklistDialog() {\n        this.setState({ addBlacklistDialog: false });\n    }\n\n    hideAddBlacklistDialogSelected() {\n        this.setState({ addBlacklistDialogSelected: false });\n    }\n\n    confirmAddBlacklist(client) {\n        this.setState({\n            selectedClient: client,\n            addBlacklistDialog: true\n        });\n    }\n\n    confirmAddBlacklistSelected() {\n        this.setState({\n            addBlacklistDialogSelected: true\n        });\n    }\n\n    async addBlacklist() {\n        try {\n            let clients = this.state.clients.filter(client => client.imei !== this.state.selectedClient.imei);\n            let data = (await this.blacklistService.addToBlacklist(this.state.selectedClient.imei));\n            this.setState({\n                clients: clients,\n                addBlacklistDialog: false,\n                selectedClient: this.emptyClient,\n                amountClients: clients.length\n            });\n\n            this.toast.show({ severity: 'success', summary: i18n.t(\"successful\"), detail: data.message, life: appSettings.TOAST_LIVE});\n        } catch (e) {\n            let response = e.response.data;\n            this.setState({\n                addBlacklistDialog: false\n            });\n            this.toast.show({ severity: 'error', summary: i18n.t(\"error\"), detail: response.message, life: appSettings.TOAST_LIVE});\n        }\n    }\n\n    async addBlacklistSelected() {\n        try {\n            let clients = this.state.clients.filter(client => !this.state.selectedClients.includes(client));\n            let data = (await this.blacklistService.addToBlacklist(this.state.selectedClients));\n            this.setState({\n                clients: clients,\n                addBlacklistDialog: false,\n                selectedClient: this.emptyClient,\n                amountClients: clients.length\n            });\n\n            this.toast.show({ severity: 'success', summary: i18n.t(\"successful\"), detail: data.message, life: appSettings.TOAST_LIVE});\n        } catch (e) {\n            let response = e.response.data;\n            this.setState({\n                addBlacklistDialog: false\n            });\n            this.toast.show({ severity: 'error', summary: i18n.t(\"error\"), detail: response.message, life: appSettings.TOAST_LIVE});\n        }\n\n        let clients = this.state.clients.filter(client => !this.state.selectedClients.includes(client));\n\n        this.setState({\n            clients: clients,\n            addBlacklistDialogSelected: false,\n            selectedClient: this.emptyClient,\n            amountClients: clients.length\n        });\n\n        this.toast.show({ severity: 'success', summary: i18n.t(\"successful\"), detail: i18n.t(\"addedClientsToTheBlacklist\"), life: appSettings.TOAST_LIVE });\n    }\n\n    renderButtons(rowData) {\n        const buttonStyle = {\n            marginLeft: \"0.5em\"\n        };\n\n        return (\n            <div>\n                <Button style={buttonStyle} type=\"button\" icon=\"pi pi-user-minus\" className=\"p-button-warning\"\n                        tooltip={i18n.t(\"kick\")}\n                        onClick={() => {this.confirmKickClient(rowData)}}\n                        tooltipOptions={{position: \"top\"}}/>\n                <Button style={buttonStyle} type=\"button\" icon=\"pi pi-ban\" className=\"p-button-danger\"\n                        tooltip={i18n.t(\"addToTheBlacklist\")}\n                        onClick={() => {this.confirmAddBlacklist(rowData)}}\n                        tooltipOptions={{position: \"top\"}}/>\n                <CopyToClipboard text={rowData.imei}\n                                 onCopy={() => {this.toast.show({ severity: 'success', summary: i18n.t(\"successful\"), detail: i18n.t(\"imeiCopied\"), life: appSettings.TOAST_LIVE });}}>\n                    <Button style={buttonStyle} type=\"button\" icon=\"pi pi-save\"\n                            tooltip={i18n.t(\"copyToClipboard\")}\n                            tooltipOptions={{position: \"top\"}}/>\n                </CopyToClipboard>\n            </div>\n        );\n    }\n\n    renderHeader() {\n        return (\n            <div style={{textAlign: \"left\"}}>\n                <span className=\"p-input-icon-left\">\n                    <i className=\"pi pi-search\"/>\n                <InputText\n                    type=\"search\"\n                    onInput={ (e) => this.setState({globalFilter: e.target.value}) }\n                    placeholder={i18n.t(\"globalSearch\")}/>\n                </span>\n            </div>\n        );\n    }\n\n    renderFooterGroup(amountClients) {\n        return (\n            <ColumnGroup>\n                <Row>\n                    <Column footer={i18n.t(\"activeClientsSummary\")} colSpan={4} footerStyle={{textAlign: 'right'}}/>\n                    <Column footer={amountClients} />\n                </Row>\n            </ColumnGroup>\n        );\n    }\n\n    renderToolbarButton() {\n        return (\n            <>\n                <Button label={this.state.showBtnLabel ? i18n.t(\"kick\"): \"\"} icon=\"pi pi-user-minus\" className=\"p-button-warning\"\n                        onClick={this.confirmKickClientsSelected}\n                        disabled={!this.state.selectedClients || !this.state.selectedClients.length} />\n                <div style={{marginLeft: \"0.5em\"}} />\n                <Button label={this.state.showBtnLabel ? i18n.t(\"addToTheBlacklist\"): \"\"} icon=\"pi pi-ban\" className=\"p-button-danger\"\n                        onClick={this.confirmAddBlacklistSelected}\n                        disabled={!this.state.selectedClients || !this.state.selectedClients.length} />\n                <div style={{marginLeft: \"0.5em\"}} />\n                <Button label={this.state.showBtnLabel ? i18n.t(\"searchByIMEI\"): \"\"} icon=\"pi pi-search\"\n                        onClick={(e) => this.op.toggle(e)}/>\n                <OverlayPanel ref={(el) => this.op = el}>\n                    <div className=\"p-inputgroup\">\n                        <InputText placeholder={i18n.t(\"enterIMEI\")}\n                                   onInput={ (e) => this.setState({searchImei: e.target.value})}/>\n                        {/*<InputText placeholder=\"Enter Tag\"*/}\n                        {/*           onInput={ (e) => this.setState({tagBlacklist: e.target.value})}/>*/}\n                        <Button label={this.state.showBtnLabel ? i18n.t(\"search\") : \"\"} icon=\"pi pi-search\" className=\"p-button-success\"\n                                disabled={(this.state.searchImei) === \"\"}\n                                onClick={this.confirmSearchImei}/>\n                        <Button label={this.state.showBtnLabel ? i18n.t(\"clear\") : \"\"} icon=\"pi pi-times-circle\" className=\"p-button-success\"\n                                disabled={(this.state.globalFilter) === undefined || (this.state.globalFilter) === \"\"}\n                                onClick={() => {\n                                    console.log(this.state.globalFilter);  this.setState({globalFilter: \"\"})}}/>\n                    </div>\n                    <div style={{marginTop: \"0.2em\"}} />\n                    <ProgressBar mode=\"indeterminate\" style={{height: \"0.2em\", visibility: this.state.searchImeiLoading}} />\n                </OverlayPanel>\n            </>\n        );\n    }\n\n    render() {\n        const header = this.renderHeader();\n\n        return (\n            <div>\n                <Toast ref={(el) => this.toast = el} />\n                <Toolbar style={{border: \"none\", borderRadius: \"0px\"}} left={this.renderToolbarButton()}/>\n                <DataTable header={header}\n                           value={this.state.clients}\n                           totalRecords={this.state.totalRecords}\n                           footerColumnGroup={this.renderFooterGroup(this.state.amountClients)}\n                           selection={this.state.selectedClients}\n                           onSelectionChange={(e) => this.setState({selectedClients: e.value})}\n                           className=\"p-datatable-clients\"\n                           globalFilter={this.state.globalFilter}\n                           emptyMessage={i18n.t(\"clientsNotFound\")}\n                           dataKey=\"imei\"\n                           paginator={true}\n                           rows={10}\n                           rowsPerPageOptions={[10,25,50]}\n                           paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n                           currentPageReportTemplate={i18n.t(\"from\") + \" {first} \" + i18n.t(\"to\") + \" {last} \" + i18n.t(\"of\") + \" {totalRecords}\"}\n                           rowHover\n                           responsive\n                           resizableColumns={true}>\n                    <Column selectionMode=\"multiple\" headerStyle={{ width: '3rem' }}/>\n                    <Column field=\"username\" header={i18n.t(\"username\")} sortable />\n                    <Column field=\"imei\" header={i18n.t(\"IMEIHash\")} sortable />\n                    <Column field=\"token.valid_to\" header={i18n.t(\"tokenValidTo\")} sortable/>\n                    <Column header={i18n.t(\"actions\")} body={this.renderButtons} style={{width: '20vw'}} />\n                </DataTable>\n\n                <DialogQuestion headerText={i18n.t(\"confirm\")} message={i18n.t(\"kickClientQuestion\")}\n                                visible={this.state.kickClientDialog}\n                                onConfirm={this.kickClient}\n                                onCancel={this.hideKickClientDialog}\n                                onHide={this.hideKickClientDialog}/>\n\n                <DialogQuestion headerText={i18n.t(\"confirm\")} message={i18n.t(\"kickClientsQuestion\")}\n                                visible={this.state.kickClientsDialogSelected}\n                                onConfirm={this.kickClientsSelected}\n                                onCancel={this.hideKickClientsDialogSelected}\n                                onHide={this.hideKickClientsDialogSelected}/>\n\n                <DialogQuestion headerText={i18n.t(\"confirm\")} message={i18n.t(\"addClientBlacklistQuestion\")}\n                                visible={this.state.addBlacklistDialog}\n                                onConfirm={this.addBlacklist}\n                                onCancel={this.hideAddBlacklistDialog}\n                                onHide={this.hideAddBlacklistDialog}/>\n\n                <DialogQuestion headerText={i18n.t(\"confirm\")} message={i18n.t(\"addClientsBlacklistQuestion\")}\n                                visible={this.state.addBlacklistDialogSelected}\n                                onConfirm={this.addBlacklistSelected}\n                                onCancel={this.hideAddBlacklistDialogSelected}\n                                onHide={this.hideAddBlacklistDialogSelected}/>\n            </div>\n        );\n    }\n}\n","import React, {Component} from 'react';\nimport {DataTable} from \"primereact/datatable\";\nimport {Column} from \"primereact/column\";\nimport {Button} from 'primereact/button';\nimport 'primeicons/primeicons.css';\nimport {InputText} from \"primereact/inputtext\";\nimport {BlacklistService} from \"./BlacklistService\";\nimport {Toast} from \"primereact/toast\";\nimport {Toolbar} from \"primereact/toolbar\";\nimport {DialogQuestion} from \"./DialogQuestion\";\nimport {OverlayPanel} from \"primereact/overlaypanel\";\nimport {ProgressBar} from \"primereact/progressbar\";\nimport {ColumnGroup} from \"primereact/columngroup\";\nimport {Row} from \"primereact/row\";\nimport {appSettings} from \"./AppSettings\";\nimport i18n from \"i18next\";\nimport {visibility} from \"../utils/CssProps\";\n\nexport class DataTableBlacklist extends Component {\n\n    emptyClient = {\n        imei: null\n    };\n\n    emptyBlacklist = [];\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            removeBlacklistDialog : false,\n            removeBlacklistDialogSelected : false,\n            selectedClients: null,\n            selectedClient: this.emptyClient,\n            blacklist: this.emptyBlacklist,\n            addBlacklistImei: \"\",\n            removeBlacklistImei: \"\",\n            tagBlacklist: \"tag\",\n            addBlacklistLoading: visibility.hidden,\n            removeBlacklistLoading: visibility.hidden,\n            blacklistSize: 0\n        };\n        this.blacklistService = new BlacklistService();\n        this.renderRowButtons = this.renderRowButtons.bind(this);\n\n        this.hideRemoveBlacklistDialog = this.hideRemoveBlacklistDialog.bind(this);\n        this.hideRemoveBlacklistDialogSelected = this.hideRemoveBlacklistDialogSelected.bind(this);\n        this.removeBlacklist = this.removeBlacklist.bind(this);\n        this.removeBlacklistSelected = this.removeBlacklistSelected.bind(this);\n        this.confirmRemoveBlacklist = this.confirmRemoveBlacklist.bind(this);\n        this.confirmRemoveBlacklistSelected = this.confirmRemoveBlacklistSelected.bind(this);\n        this.confirmAddBlacklist = this.confirmAddBlacklist.bind(this);\n        this.confirmRemoveBlacklistOverlay = this.confirmRemoveBlacklistOverlay.bind(this);\n    }\n\n    async componentDidMount() {\n        try {\n            let blacklist = await this.blacklistService.getBlacklist();\n            this.setState({\n                blacklist: blacklist,\n                blacklistSize: blacklist.length\n            })\n        } catch (e) {\n            console.log(`Blacklist request failed: ${e}`);\n        }\n    }\n\n    confirmRemoveBlacklistSelected() {\n        this.setState({removeBlacklistDialogSelected: true});\n    }\n\n    confirmRemoveBlacklist(client) {\n        this.setState({\n            selectedClient: client,\n            removeBlacklistDialog: true\n        });\n    }\n\n    async confirmAddBlacklist() {\n        this.setState({addBlacklistLoading: visibility.visible});\n\n        try {\n            let data = await this.blacklistService.addToBlacklist(this.state.addBlacklistImei);\n            let newBlacklist = this.state.blacklist;\n            newBlacklist.push({imei: data.imeilist[0]});\n\n            this.setState({\n                addBlacklistLoading: visibility.hidden,\n                blacklist: newBlacklist,\n                addBlacklistImei: \"\",\n                blacklistSize: newBlacklist.length\n            });\n            this.toast.show({ severity: 'success', summary: i18n.t(\"successful\"), detail: data.message, life: appSettings.TOAST_LIVE });\n        } catch (e) {\n            let response = e.response.data;\n            console.log(response);\n            console.log(i18n.t(\"addBlacklistRequestFailed\") + response);\n            this.setState({\n                addBlacklistLoading: visibility.hidden\n            });\n            this.toast.show({ severity: 'error', summary: i18n.t(\"error\"), detail: response.message, life: appSettings.TOAST_LIVE });\n        }\n    }\n\n    async confirmRemoveBlacklistOverlay() {\n        this.setState({removeBlacklistLoading: visibility.visible});\n\n        try {\n            let data = await this.blacklistService.removeFromBlacklist(this.state.removeBlacklistImei);\n            let blacklist = await this.blacklistService.getBlacklist();\n            this.setState({\n                blacklist: blacklist,\n                blacklistSize: blacklist.length,\n                removeBlacklistLoading: visibility.hidden,\n                removeBlacklistImei: \"\"\n            });\n            this.toast.show({ severity: 'success', summary: i18n.t(\"successful\"), detail: data.message, life: appSettings.TOAST_LIVE });\n        } catch (e) {\n            let response = e.response.data;\n            console.log(response);\n            console.log(i18n.t(\"removeBlacklistRequestFailed\") + response);\n            this.setState({\n                removeBlacklistLoading: visibility.hidden\n            });\n            this.toast.show({ severity: 'error', summary: i18n.t(\"error\"), detail: response.message, life: appSettings.TOAST_LIVE });\n        }\n    }\n\n    hideRemoveBlacklistDialogSelected() {\n        this.setState({ removeBlacklistDialogSelected: false });\n    }\n\n    hideRemoveBlacklistDialog() {\n        this.setState({ removeBlacklistDialog: false });\n    }\n\n    async removeBlacklistSelected() {\n        try {\n            let clients = this.state.blacklist.filter(client => !this.state.selectedClients.includes(client));\n            await this.blacklistService.removeFromBlacklist(this.state.selectedClients);\n\n            this.setState({\n                blacklist: clients,\n                removeBlacklistDialogSelected: false,\n                selectedClients: null\n            });\n\n            this.toast.show({severity: 'success', summary: i18n.t(\"successful\"), detail: i18n.t(\"removeClientsFromTheBlacklist\"),\n                life: appSettings.TOAST_LIVE });\n        } catch (e) {\n            let response = e.response.data;\n            this.toast.show({severity: 'error', summary: i18n.t(\"error\"), detail: response === null ? `${e}` : response.message,\n                life: appSettings.TOAST_LIVE });\n\n            this.setState({\n                removeBlacklistDialogSelected: false,\n            });\n        }\n    }\n\n    async removeBlacklist() {\n        try {\n            await this.blacklistService.removeFromBlacklist(this.state.selectedClient.imei);\n            let clients = this.state.blacklist.filter(client => client.imei !== this.state.selectedClient.imei);\n            this.setState({\n                blacklist: clients,\n                removeBlacklistDialog: false,\n                blacklistSize: clients.length,\n                selectedClient: this.emptyClient\n            });\n\n            this.toast.show({ severity: 'success', summary: i18n.t(\"successful\"), detail: i18n.t(\"removeClientFromTheBlacklist\"), life: appSettings.TOAST_LIVE });\n        } catch (e) {\n            console.log(`Remove blacklist request failed: ${e}`);\n            this.setState({\n                removeBlacklistDialog: false\n            });\n\n            this.toast.show({ severity: 'error', summary: i18n.t(\"error\"), detail: `${e}`, life: appSettings.TOAST_LIVE});\n        }\n    }\n\n    renderHeader() {\n        return (\n            <div style={{textAlign: \"left\"}}>\n                <span className=\"p-input-icon-left\">\n                    <i className=\"pi pi-search\"/>\n                    <InputText\n                        type=\"search\"\n                        onInput={ (e) => this.setState({globalFilter: e.target.value}) }\n                        placeholder={i18n.t(\"IMEIHashSearch\")}/>\n                </span>\n            </div>\n        );\n    }\n\n    renderRowButtons(rowData) {\n        const buttonStyle = {\n            marginLeft: \"0.5em\"\n        };\n\n        return (\n            <div>\n                <Button style={buttonStyle} type=\"button\" icon=\"pi pi-lock-open\" className=\"p-button-danger\"\n                        onClick={() => {this.confirmRemoveBlacklist(rowData)}}\n                        tooltip={i18n.t(\"removeFromTheBlacklistBtn\")}\n                        tooltipOptions={{position: \"top\"}}/>\n            </div>\n        );\n    }\n\n    renderToolbarButton() {\n        return (\n            <>\n                <Button label={i18n.t(\"add\")} icon=\"pi pi-ban\" className=\"p-button-success\"\n                        onClick={(e) => this.op.toggle(e)}/>\n                <OverlayPanel ref={(el) => this.op = el}>\n                    <div className=\"p-inputgroup\">\n                        <InputText placeholder={i18n.t(\"enterIMEIOrIMEIHash\")}\n                                   onInput={ (e) => this.setState({addBlacklistImei: e.target.value})}/>\n                        {/*<InputText placeholder=\"Enter Tag\"*/}\n                        {/*           onInput={ (e) => this.setState({tagBlacklist: e.target.value})}/>*/}\n                        <Button label={i18n.t(\"add\")} icon=\"pi pi-ban\" className=\"p-button-success\"\n                                disabled={(this.state.tagBlacklist && this.state.addBlacklistImei) === \"\"}\n                                onClick={this.confirmAddBlacklist}/>\n                    </div>\n                    <div style={{marginTop: \"0.2em\"}} />\n                    <ProgressBar mode=\"indeterminate\" style={{height: \"0.2em\", visibility: this.state.addBlacklistLoading}} />\n                </OverlayPanel>\n                <div style={{marginLeft: \"0.5em\"}} />\n                <Button label={i18n.t(\"remove\")} icon=\"pi pi-lock-open\" className=\"p-button-danger\"\n                        onClick={this.confirmRemoveBlacklistSelected} style={{borderRadius: \"3px 0px 0px 3px\"}}\n                        disabled={!this.state.selectedClients || !this.state.selectedClients.length} />\n                <Button label={i18n.t(\"\")} icon=\"pi pi-chevron-down\" style={{borderRadius: \"0px 3px 3px 0px\"}}\n                        className=\"p-button-danger\"\n                        onClick={(e) => this.opr.toggle(e)}/>\n                <OverlayPanel ref={(el) => this.opr = el}>\n                    <div className=\"p-inputgroup\">\n                        <InputText placeholder={i18n.t(\"enterIMEIOrIMEIHash\")}\n                                   onInput={ (e) => this.setState({removeBlacklistImei: e.target.value})}/>\n                        <Button label={i18n.t(\"remove\")} icon=\"pi pi-lock-open\" className=\"p-button-danger\"\n                                disabled={(this.state.tagBlacklist && this.state.removeBlacklistImei) === \"\"}\n                                onClick={this.confirmRemoveBlacklistOverlay}/>\n                    </div>\n                    <div style={{marginTop: \"0.2em\"}} />\n                    <ProgressBar mode=\"indeterminate\" style={{height: \"0.2em\", visibility: this.state.removeBlacklistLoading}} />\n                </OverlayPanel>\n            </>\n        );\n    }\n\n    renderFooterGroup(size) {\n        return (\n            <ColumnGroup>\n                <Row>\n                    <Column footer={i18n.t(\"blacklistSizeSummary\")} colSpan={2} footerStyle={{textAlign: 'right'}}/>\n                    <Column footer={size} />\n                </Row>\n            </ColumnGroup>\n        );\n    }\n\n    render() {\n        const header = this.renderHeader();\n        const btn = this.renderToolbarButton();\n\n        return (\n            <div>\n                <Toast ref={(el) => this.toast = el} />\n                <Toolbar style={{border: \"none\", borderRadius: \"0px\"}} left={btn}/>\n                <DataTable header={header}\n                           value={this.state.blacklist}\n                           footerColumnGroup={this.renderFooterGroup(this.state.blacklistSize)}\n                           selection={this.state.selectedClients}\n                           onSelectionChange={(e) => this.setState({selectedClients: e.value})}\n                           className=\"p-datatable-blacklist\"\n                           globalFilter={this.state.globalFilter}\n                           emptyMessage={i18n.t(\"IMEIHashNotFound\")}\n                           dataKey=\"imei\"\n                           paginator={true}\n                           rows={10}\n                           rowsPerPageOptions={[10,25,50]}\n                           paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n                           currentPageReportTemplate={i18n.t(\"from\") + \" {first} \" + i18n.t(\"to\") + \" {last} \" + i18n.t(\"of\") + \" {totalRecords}\"}\n                           rowHover\n                           responsive\n                           resizableColumns={true}>\n                    <Column selectionMode=\"multiple\" headerStyle={{ width: '3rem' }}/>\n                    <Column field=\"imei\" header={i18n.t(\"IMEIHash\")} sortable />\n                    <Column header={i18n.t(\"actions\")} body={this.renderRowButtons} style={{width: '20vw'}} />\n                </DataTable>\n\n                <DialogQuestion headerText={i18n.t(\"confirm\")} message={i18n.t(\"removeClientFromTheBlacklistQuestion\")}\n                                visible={this.state.removeBlacklistDialog}\n                                onConfirm={this.removeBlacklist}\n                                onCancel={this.hideRemoveBlacklistDialog}\n                                onHide={this.hideRemoveBlacklistDialog}/>\n\n                <DialogQuestion headerText={i18n.t(\"confirm\")} message={i18n.t(\"removeClientsFromTheBlacklistQuestion\")}\n                                visible={this.state.removeBlacklistDialogSelected}\n                                onConfirm={this.removeBlacklistSelected}\n                                onCancel={this.hideRemoveBlacklistDialogSelected}\n                                onHide={this.hideRemoveBlacklistDialogSelected}/>\n            </div>\n        );\n    }\n}\n","import API from './API';\n\nexport class DatasourceService {\n\n    async getDatasource() {\n        return (await API.get(\"/datasource\")).data;\n    }\n    \n    async changeDatasource(state) {\n        console.log(this.requestForm(state));\n\n        return (await API.put(\"/datasource\", this.requestForm(state))).data;\n    }\n\n    requestForm(state) {\n        return {\n            username: state.username,\n            password: state.password,\n            host: state.host,\n            port: state.port,\n            db_name: state.dbName,\n            db_type: state.dbType,\n            script_encoding: state.scriptEncoding,\n            driver_class_name: state.driverClassName,\n            additional: state.additional,\n            pool: {\n                auto_commit: state.autoCommit,\n                connection_timeout: state.connectionTimeout,\n                idle_timeout: state.idleTimeout,\n                max_life_time: state.maxLifeTime,\n                maximum_pool_size: state.maximumPoolSize\n            }\n        };\n    }\n}\n","\nexport function getCookie(name) {\n    let matches = document.cookie.match(new RegExp(\n        \"(?:^|; )\" + name.replace(/([.$?*|{}()[\\]\\\\/+^])/g, '\\\\$1') + \"=([^;]*)\"\n    ));\n    return matches ? decodeURIComponent(matches[1]) : undefined;\n}\n\nexport function setCookie(name, value, options = {}) {\n\n    options = {\n        path: '/',\n        ...options\n    };\n\n    if (options.expires instanceof Date) {\n        options.expires = options.expires.toUTCString();\n    }\n\n    let updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n\n    for (let optionKey in options) {\n        updatedCookie += \"; \" + optionKey;\n        let optionValue = options[optionKey];\n        if (optionValue !== true) {\n            updatedCookie += \"=\" + optionValue;\n        }\n    }\n\n    document.cookie = updatedCookie;\n}\n","import i18n from \"i18next\";\nimport {getCookie, setCookie} from \"./CookiesUtils\";\n\nexport const languages = [\n    { lng: 'English', code: 'en' },\n    { lng: 'Русский', code: 'ru' }\n];\n\nexport function getEncodingLocation(lang) {\n    if(lang === \"ru\")\n        return [\n            {\n                name: \"Cp437\",\n                aliases: \"437, IBM437\",\n                lang: \"Английский\"\n            },\n            {\n                name: \"Cp850\",\n                aliases: \"850, IBM850\",\n                lang: \"Латынь\"\n            },\n            {\n                name: \"Cp852\",\n                aliases: \"852, IBM852\",\n                lang: \"Латынь\"\n            },\n            {\n                name: \"Cp855\",\n                aliases: \"855, IBM855\",\n                lang: \"Кириллица\"\n            },\n            {\n                name: \"Cp866\",\n                aliases: \"866, IBM866\",\n                lang: \"Русский\"\n            },\n            {\n                name: \"windows-1250\",\n                aliases: \"Cp1250 cp1250\",\n                lang: \"Восточно-Европейский\"\n            },\n            {\n                name: \"windows-1251\",\n                aliases: \"Cp1250 cp1250\",\n                lang: \"Кириллица\"\n            },\n            {\n                name: \"windows-1252\",\n                aliases: \"Cp1252 cp1252\",\n                lang: \"Латынь\"\n            },\n            {\n                name: \"ISO-8859-1\",\n                aliases: \"ISO8859_1 l1\",\n                lang: \"Латынь\"\n            },\n            {\n                name: \"ISO-8859-2\",\n                aliases: \"ISO8859_2 l2\",\n                lang: \"Латынь\"\n            },\n            {\n                name: \"ISO-8859-5\",\n                aliases: \"ISO8859_5 cyrillic\",\n                lang: \"Кириллица\"\n            },\n            {\n                name: \"ISO8859_15\",\n                aliases: \"ISO8859_15 LATIN9\",\n                lang: \"Латынь\"\n            },\n            {\n                name: \"KOI8_R\",\n                aliases: \"KOI8_R koi8_r koi8\",\n                lang: \"Русский\"\n            },\n            {\n                name: \"KOI8_U\",\n                aliases: \"KOI8_U koi8_u\",\n                lang: \"Украинский\"\n            },\n            {\n                name: \"UTF-8\",\n                aliases: \"UTF-8, U8, utf8\",\n                lang: \"Все языки\"\n            },\n            {\n                name: \"UTF-16\",\n                aliases: \"UTF_16 unicode utf16\",\n                lang: \"Все языки\"\n            },\n            {\n                name: \"UTF-32\",\n                aliases: \"UTF_32 UTF32\",\n                lang: \"Все языки\"\n            },\n        ];\n    else\n        return [\n            {\n                name: \"Cp437\",\n                aliases: \"437, IBM437\",\n                lang: \"English\"\n            },\n            {\n                name: \"Cp850\",\n                aliases: \"850, IBM850\",\n                lang: \"Latin\"\n            },\n            {\n                name: \"Cp852\",\n                aliases: \"852, IBM852\",\n                lang: \"Latin\"\n            },\n            {\n                name: \"Cp855\",\n                aliases: \"855, IBM855\",\n                lang: \"Cyrillic\"\n            },\n            {\n                name: \"Cp866\",\n                aliases: \"866, IBM866\",\n                lang: \"Russian\"\n            },\n            {\n                name: \"windows-1250\",\n                aliases: \"Cp1250 cp1250\",\n                lang: \"Eastern European\"\n            },\n            {\n                name: \"windows-1251\",\n                aliases: \"Cp1250 cp1250\",\n                lang: \"Cyrillic\"\n            },\n            {\n                name: \"windows-1252\",\n                aliases: \"Cp1252 cp1252\",\n                lang: \"Latin\"\n            },\n            {\n                name: \"ISO-8859-1\",\n                aliases: \"ISO8859_1 l1\",\n                lang: \"Latin\"\n            },\n            {\n                name: \"ISO-8859-2\",\n                aliases: \"ISO8859_2 l2\",\n                lang: \"Latin\"\n            },\n            {\n                name: \"ISO-8859-5\",\n                aliases: \"ISO8859_5 cyrillic\",\n                lang: \"Cyrillic\"\n            },\n            {\n                name: \"ISO8859_15\",\n                aliases: \"ISO8859_15 LATIN9\",\n                lang: \"Latin\"\n            },\n            {\n                name: \"KOI8_R\",\n                aliases: \"KOI8_R koi8_r koi8\",\n                lang: \"Russian\"\n            },\n            {\n                name: \"KOI8_U\",\n                aliases: \"KOI8_U koi8_u\",\n                lang: \"Ukrainian\"\n            },\n            {\n                name: \"UTF-8\",\n                aliases: \"UTF-8, U8, utf8\",\n                lang: \"All Languages\"\n            },\n            {\n                name: \"UTF-16\",\n                aliases: \"UTF_16 unicode utf16\",\n                lang: \"All Languages\"\n            },\n            {\n                name: \"UTF-32\",\n                aliases: \"UTF_32 UTF32\",\n                lang: \"All Languages\"\n            },\n        ];\n}\n\nexport function getCalendarLocation(lang) {\n    if(lang === \"ru\") {\n        return {\n            firstDayOfWeek: 1,\n            dayNames: [\"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\", \"Воскресенье\"],\n            dayNamesShort: [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\"],\n            dayNamesMin: [\"П\", \"В\", \"С\", \"Ч\", \"П\", \"С\", \"В\"],\n            monthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\n            monthNamesShort: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Нов\", \"Дек\"],\n            today: \"Сегодня\",\n            clear: \"Очистить\",\n            weekHeader: \"Нд\"\n        };\n    } else return {\n        firstDayOfWeek: 0,\n        dayNames: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n        dayNamesShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n        dayNamesMin: [\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"],\n        monthNames: [ \"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\" ],\n        monthNamesShort: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ],\n        today: 'Today',\n        clear: 'Clear',\n        weekHeader: 'Wk'\n    }\n}\n\nconst resources = {\n    en: {\n        translation: {\n            \"clients\": \"Clients\",\n            \"kick\": \"Kick\",\n            \"addToTheBlacklist\": \"Add to the blacklist\",\n            \"copyToClipboard\": \"Copy IMEI to Clipboard\",\n            \"globalSearch\": \"Global Search\",\n            \"searchByIMEI\": \"Search By IMEI\",\n            \"username\": \"Username\",\n            \"IMEIHash\": \"IMEI Hash\",\n            \"tokenValidTo\": \"Token Valid To\",\n            \"actions\": \"Actions\",\n            \"clientsNotFound\": \"Clients not found\",\n            \"activeClientsSummary\": \"Active clients:\",\n            \"from\": \"\",\n            \"to\": \"to\",\n            \"of\": \"of\",\n            \"blacklist\": \"Blacklist\",\n            \"add\": \"Add\",\n            \"remove\": \"Remove\",\n            \"IMEIHashSearch\": \"IMEI Hash Search\",\n            \"IMEIHashNotFound\": \"IMEI Hash not found\",\n            \"blacklistSizeSummary\": \"Blacklist size:\",\n            \"logs\": \"Logs\",\n            \"type\": \"Type\",\n            \"message\": \"Message\",\n            \"selectAType\": \"Type\",\n            \"searchByMessage\": \"Search by Message\",\n            \"logsNotFound\": \"Logs not found\",\n            \"recordsSummary\": \"Records:\",\n            \"datasource\": \"Datasource\",\n            \"connection\": \"Connection\",\n            \"password\": \"Password\",\n            \"host\": \"Host\",\n            \"port\": \"Port\",\n            \"databaseName\": \"Database Name\",\n            \"databaseType\": \"Database Type\",\n            \"scriptEncoding\": \"Script Encoding\",\n            \"driverClassName\": \"Driver Class Name\",\n            \"additional\": \"Additional\",\n            \"pool\": \"Pool\",\n            \"autoCommit\": \"Auto Commit\",\n            \"autoCommitHint\": \"Controls the default auto-commit behavior of connections returned from the pool\",\n            \"connectionTimeout\": \"Connection Timeout\",\n            \"connectionTimeoutHint\": \"Controls the maximum number of milliseconds that a client will wait for a connection from the pool. Lowest acceptable connection timeout is 250 ms\",\n            \"idleTimeout\": \"Idle Timeout\",\n            \"idleTimeoutHint\": \"Controls the maximum amount of time that a connection is allowed to sit idle in the pool. A value of 0 means that idle connections are never removed from the pool. The minimum allowed value is 10000ms (10 seconds)\",\n            \"maxLifeTime\": \"Max Life Time\",\n            \"maxLifeTimeHint\": \"Controls the maximum lifetime of a connection in the pool. A value of 0 indicates no maximum lifetime (infinite lifetime), subject of course to the idleTimeout setting. The minimum allowed value is 30000ms (30 seconds)\",\n            \"maximumPoolSize\": \"Maximum Pool Size\",\n            \"maximumPoolSizeHint\": \"Controls the maximum size that the pool is allowed to reach, including both idle and in-use connections. Basically this value will determine the maximum number of actual connections to the database backend\",\n            \"applyChangesBtn\": \"Apply Changes\",\n            \"reset\": \"Reset\",\n            \"clientTimeoutValue\": \"Client Timeout, days\",\n            \"clientTimeoutValueHint\": \"Value '0' means no timeout.\",\n            \"other\": \"Other\",\n            \"language\": \"Language\",\n            \"languagePlaceholder\": \"Select a language\",\n            \"restart\": \"Restart\",\n            \"restartPage\": \"Restart page required\",\n            \"settings\": \"Settings\",\n            \"successful\": \"Successful\",\n            \"error\": \"Error\",\n            \"kickRequestFailed\": \"Kick client request failed: \",\n            \"addedClientsToTheBlacklist\": \"Clients added to the blacklist\",\n            \"confirm\": \"Confrirm\",\n            \"kickClientQuestion\": \"Are you sure want to kick this client?\",\n            \"kickClientsQuestion\": \"Are you sure want to kick the selected clients?\",\n            \"addClientBlacklistQuestion\": \"Are you sure want to add this client to the blacklist?\",\n            \"addClientsBlacklistQuestion\": \"Are you sure want to add selected clients to the blacklist?\",\n            \"addBlacklistRequestFailed\": \"Add blacklist request failed: \",\n            \"removeClientsFromTheBlacklist\": \"Clients removed from the blacklist\",\n            \"removeClientFromTheBlacklist\": \"Client removed from the blacklist\",\n            \"removeFromTheBlacklistBtn\": \"Remove from the blacklist\",\n            \"enterIMEI\": \"Enter IMEI\",\n            \"enterIMEIOrIMEIHash\": \"Enter IMEI or IMEI Hash\",\n            \"removeClientsFromTheBlacklistQuestion\": \"Are you sure want to remove the selected clients from the blacklist?\",\n            \"removeClientFromTheBlacklistQuestion\": \"Are you sure want to remove this client from the blacklist?\",\n            \"removeByIMEI\": \"Remove by IMEI\",\n            \"logDateSearch\": \"Search by Date\",\n            \"search\": \"Search\",\n            \"pickADate\": \"Pick a date\",\n            \"restartTime\": \"Restart in\",\n            \"restartTimeSec\": \" seconds\",\n            \"imeiCopied\": \"IMEI is copied\",\n            \"clear\": \"Clear\",\n            \"changePass\": \"Change password\",\n            \"change\": \"Change\",\n            \"enterNewPass\": \"Enter new password\",\n            \"changePassRequestFailed\": \"Request failed from changePass\",\n            \"logout\": \"Logout\"\n        }\n    },\n    ru: {\n        translation: {\n            \"clients\": \"Клиенты\",\n            \"kick\": \"Исключить\",\n            \"addToTheBlacklist\": \"Добавить в ЧС\",\n            \"copyToClipboard\": \"Копировать IMEI\",\n            \"globalSearch\": \"Глобальный поиск\",\n            \"searchByIMEI\": \"Поиск по IMEI\",\n            \"username\": \"Имя Пользователя\",\n            \"IMEIHash\": \"Хэш IMEI\",\n            \"tokenValidTo\": \"Токен: годен до\",\n            \"actions\": \"Действия\",\n            \"clientsNotFound\": \"Клиенты не найдены\",\n            \"activeClientsSummary\": \"Активных клиентов:\",\n            \"from\": \"c\",\n            \"to\": \"по\",\n            \"of\": \"из\",\n            \"blacklist\": \"Черный список\",\n            \"add\": \"Добавить\",\n            \"remove\": \"Удалить\",\n            \"IMEIHashSearch\": \"Поиск Хэш IMEI\",\n            \"IMEIHashNotFound\": \"Хэш IMEI не найден\",\n            \"blacklistSizeSummary\": \"Клиентов в черном списке:\",\n            \"logs\": \"Логи\",\n            \"type\": \"Тип\",\n            \"message\": \"Сообщение\",\n            \"selectAType\": \"Тип\",\n            \"searchByMessage\": \"Поиск по сообщению\",\n            \"logsNotFound\": \"Логи не найдены\",\n            \"recordsSummary\": \"Записей:\",\n            \"datasource\": \"Источник данных\",\n            \"connection\": \"Соединение\",\n            \"password\": \"Пароль\",\n            \"host\": \"Хост\",\n            \"port\": \"Порт\",\n            \"databaseName\": \"Имя Базы Данных\",\n            \"databaseType\": \"Тип Базы Данных\",\n            \"scriptEncoding\": \"Кодировка Скрипта\",\n            \"driverClassName\": \"Имя драйвера класса\",\n            \"additional\": \"Дополнительно\",\n            \"pool\": \"Пул\",\n            \"autoCommit\": \"Авто Коммит\",\n            \"autoCommitHint\": \"Управляет поведением автоматической фиксации по умолчанию для подключений, возвращаемых с пула\",\n            \"connectionTimeout\": \"Тайм-аут соединения\",\n            \"connectionTimeoutHint\": \"Управляет максимальным количеством миллисекунд, в течение которых клиент будет ожидать подключение из пула. Минимальное допустимое время ожидания соединения составляет 250 мс.\",\n            \"idleTimeout\": \"Время простоя\",\n            \"idleTimeoutHint\": \"Управляет максимальным временем, в течение которого соединение может простаивать в пуле. Значение 0 означает, что неактивные соединения никогда не удаляются из пула. Минимально допустимое значение - 10000 мс (10 секунд).\",\n            \"maxLifeTime\": \"Максимальное время жизни\",\n            \"maxLifeTimeHint\": \"Управляет максимальным временем жизни соединения в пуле. Значение 0 указывает на отсутствие максимального времени жизни (бесконечное время жизни), с учетом настройки времени простоя. Минимально допустимое значение - 30000 мс (30 секунд).\",\n            \"maximumPoolSize\": \"Максимальный размер пула\",\n            \"maximumPoolSizeHint\": \"Управляет максимальным размером, который может достигать пул, включая как незанятые, так и используемые соединения. Обычно это значение определяет максимальное количество фактических подключений к бэкэнду базы данных.\",\n            \"applyChangesBtn\": \"Применить изменения\",\n            \"reset\": \"Сбросить\",\n            \"clientTimeoutValue\": \"Тайм-аут клиента, в днях\",\n            \"clientTimeoutValueHint\": \"Значение '0' означает отсутствие тайм-аута.\",\n            \"other\": \"Другое\",\n            \"language\": \"Язык\",\n            \"languagePlaceholder\": \"Выберите язык\",\n            \"restart\": \"Перезагрузка\",\n            \"restartPage\": \"Требуются обновить страницу\",\n            \"settings\": \"Настройки\",\n            \"successful\": \"Успех\",\n            \"error\": \"Ошибка\",\n            \"kickRequestFailed\": \"Ошибка исключения клиента: \",\n            \"addedClientsToTheBlacklist\": \"Клиенты добавлены в черный список\",\n            \"confirm\": \"Подтвердить\",\n            \"kickClientQuestion\": \"Вы уверены, что хотите исключить выбранного клиента?\",\n            \"kickClientsQuestion\": \"Вы уверены, что хотите исключить выбранных клиентов?\",\n            \"addClientBlacklistQuestion\": \"Вы уверены, что хотите добавить выбранного клиента в черный список?\",\n            \"addClientsBlacklistQuestion\": \"Вы уверены, что хотите добавить выбранных клиентов в черный список?\",\n            \"addBlacklistRequestFailed\": \"Ошибка запроса черного списка: \",\n            \"removeClientsFromTheBlacklist\": \"Клиенты удалены из черного списка\",\n            \"removeClientFromTheBlacklist\": \"Клиент удален из черного списка\",\n            \"removeFromTheBlacklistBtn\": \"Удалить из ЧС\",\n            \"enterIMEI\": \"Введите IMEI\",\n            \"enterIMEIOrIMEIHash\": \"Введите IMEI или Хэш IMEI\",\n            \"removeClientsFromTheBlacklistQuestion\": \"Вы уверены, что хотите удалить выбранных клиентов из черного списка?\",\n            \"removeClientFromTheBlacklistQuestion\": \"Вы уверены, что хотите удалить выбранного клиента из черного списка?\",\n            \"logDateSearch\": \"Поиск по Дате\",\n            \"search\": \"Поиск\",\n            \"pickADate\": \"Выберите дату\",\n            \"restartTime\": \"Перезагрузка через\",\n            \"restartTimeSec\": \" секунд\",\n            \"imeiCopied\": \"IMEI скопирован в буфер обмена\",\n            \"clear\": \"Очистить\",\n            \"changePass\": \"Изменить пароль\",\n            \"change\": \"Изменить\",\n            \"enterNewPass\": \"Введите новый пароль\",\n            \"changePassRequestFailed\": \"Ошибка при отправке команды changePass\",\n            \"logout\": \"Выход\"\n        }\n    }\n};\n\nexport function changeLanguage(lang) {\n    i18n.changeLanguage(lang);\n    setCookie(\"lang\", lang);\n}\n\nexport function initLanguage(lang) {\n    i18n.init({\n        resources,\n        lng: lang\n    });\n}\n\nexport function getLanguage() {\n    if(getCookie(\"lang\") === undefined) {\n        setCookie(\"lang\", \"en\");\n    }\n    return getCookie(\"lang\");\n}","import React, {Component} from 'react';\nimport {Password} from \"primereact/password\";\nimport {Button} from \"primereact/button\";\nimport {Fieldset} from \"primereact/fieldset\";\nimport {InputText} from \"primereact/inputtext\";\nimport {DatasourceService} from \"../service/DatasourceService\";\nimport {Toast} from \"primereact/toast\";\nimport _ from \"lodash\";\nimport {appSettings} from \"./AppSettings\";\nimport {InputTextarea} from \"primereact/inputtextarea\";\nimport {Checkbox} from \"primereact/checkbox\";\nimport {Tooltip} from \"primereact/tooltip\"\nimport i18n from \"i18next\";\nimport {AutoComplete} from \"primereact/autocomplete\";\nimport {getEncodingLocation} from \"../utils/Translate\";\nimport {dbType} from \"./InnerData\";\n\nexport class DatasourceView extends Component {\n\n    propsType = {\n        username: \"username\",\n        password: \"password\",\n        host: \"host\",\n        port: \"port\",\n        dbName: \"dbName\",\n        dbType: \"dbType\",\n        scriptEncoding: \"scriptEncoding\",\n        driverClassName: \"driverClassName\",\n        additional: \"additional\",\n        autoCommit: \"autoCommit\",\n        connectionTimeout: \"connectionTimeout\",\n        idleTimeout: \"idleTimeout\",\n        maxLifeTime: \"maxLifeTime\",\n        maximumPoolSize: \"maximumPoolSize\",\n        filteredEncodings: \"filteredEncodings\",\n        filteredDbTypes: \"filteredDbTypes\",\n        filteredDriverName: \"filteredDriverName\"\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            host: \"\",\n            port: 0,\n            dbName: \"\",\n            dbType: \"\",\n            scriptEncoding: \"\",\n            driverClassName: \"\",\n            additional: \"\",\n            disabledApply: true,\n            disabledReset: true,\n            autoCommit: true,\n            connectionTimeout: 0,\n            idleTimeout: 0,\n            maximumPoolSize: 0,\n            encodings: [],\n            databases: [],\n            filteredEncodings: null,\n            filteredDbTypes: null,\n            filteredDriverName: null,\n            isToggleable: !(window.innerWidth > 600),\n\n            current: {\n                username: \"\",\n                password: \"\",\n                host: \"\",\n                port: 0,\n                dbName: \"\",\n                dbType: \"\",\n                scriptEncoding: \"\",\n                driverClassName: \"\",\n                additional: \"\",\n\n                autoCommit: true,\n                connectionTimeout: 0,\n                idleTimeout: 0,\n                maxLifeTime: 0,\n                maximumPoolSize: 0\n            }\n        };\n\n        this.datasourceService = new DatasourceService();\n\n        this.changeDatasource = this.changeDatasource.bind(this);\n        this.changeState = this.changeState.bind(this);\n        this.checkApply = this.checkApply.bind(this);\n        this.checkProp = this.checkProp.bind(this);\n        this.reset = this.reset.bind(this);\n        this.searchEncoding = this.searchEncoding.bind(this);\n        this.scriptEncodingAutoCompleteTemplate = this.scriptEncodingAutoCompleteTemplate.bind(this);\n        this.dbTypeAutoCompleteTemplate = this.dbTypeAutoCompleteTemplate.bind(this);\n        this.driverNameAutoCompleteTemplate = this.driverNameAutoCompleteTemplate.bind(this);\n        this.cardTemplate = this.cardTemplate.bind(this);\n        this.searchDriverName = this.searchDriverName.bind(this);\n        this.searchDbType = this.searchDbType.bind(this);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n\n    updateDimensions = () => {\n        if(window.innerWidth <= 600) {\n            this.setState({ isToggleable: true });\n        } else {\n            this.setState({ isToggleable: false });\n        }\n    };\n\n    async componentDidMount() {\n        window.addEventListener('resize', this.updateDimensions);\n        this.datasourceService.getDatasource().then(data => {\n            this.setState({\n                username: data.username,\n                password: data.password,\n                host: data.host,\n                port: data.port,\n                dbName: data[\"db_name\"],\n                dbType: data[\"db_type\"],\n                scriptEncoding: data[\"script_encoding\"],\n                driverClassName: data[\"driver_class_name\"],\n                additional: data.additional,\n                autoCommit: data.pool[\"auto_commit\"],\n                connectionTimeout: data.pool[\"connection_timeout\"],\n                idleTimeout: data.pool[\"idle_timeout\"],\n                maxLifeTime: data.pool[\"max_life_time\"],\n                maximumPoolSize: data.pool[\"maximum_pool_size\"],\n                encodings: getEncodingLocation(this.props.lang),\n                databases: dbType(),\n\n                current: {\n                    username: data.username,\n                    password: data.password,\n                    host: data.host,\n                    port: data.port,\n                    dbName: data[\"db_name\"],\n                    dbType: data[\"db_type\"],\n                    scriptEncoding: data[\"script_encoding\"],\n                    driverClassName: data[\"driver_class_name\"],\n                    additional: data.additional,\n\n                    autoCommit: data.pool[\"auto_commit\"],\n                    connectionTimeout: data.pool[\"connection_timeout\"],\n                    idleTimeout: data.pool[\"idle_timeout\"],\n                    maxLifeTime: data.pool[\"max_life_time\"],\n                    maximumPoolSize: data.pool[\"maximum_pool_size\"]\n                }\n            });\n        });\n    }\n\n    async changeDatasource() {\n        try {\n            let data = await this.datasourceService.changeDatasource(this.state);\n\n            this.setState({\n                disabledApply: true,\n                disabledReset: true,\n                current: {\n                    username: this.state.username,\n                    password: this.state.password,\n                    host: this.state.host,\n                    port: this.state.port,\n                    dbName: this.state.dbName,\n                    dbType: this.state.dbType,\n                    scriptEncoding: this.state.scriptEncoding,\n                    driverClassName: this.state.driverClassName,\n                    additional: this.state.additional,\n\n                    autoCommit: this.state.autoCommit,\n                    connectionTimeout: this.state.connectionTimeout,\n                    idleTimeout: this.state.idleTimeout,\n                    maxLifeTime: this.state.maxLifeTime,\n                    maximumPoolSize: this.state.maximumPoolSize,\n                }\n            });\n\n            this.props.restart();\n            this.toast.show({ severity: 'success', summary: 'Successful', detail: data.message, life: appSettings.TOAST_LIVE });\n        } catch (e) {\n            let response = \"\";\n            try {\n                response = e.response.data;\n            } catch (e1) {\n                response = e;\n            }\n\n            let message = \"Internal Server Error. :(\";\n            try {\n                if (response.message != null)\n                    message = response.message;\n            } catch (e) {}\n            console.log(\"Change datasource failed: \" + response);\n            this.toast.show({\n                severity: 'error',\n                summary: 'Error',\n                detail: message,\n                life: appSettings.TOAST_LIVE\n            });\n        }\n    }\n\n    changeState(chState, type, value) {\n        let disabled = this.checkApply(type, value);\n        chState.disabledApply = disabled;\n        chState.disabledReset = disabled;\n        this.setState(chState);\n    }\n\n    checkProp(currentType, propType, value, defaultValue) {\n        if (typeof value === \"boolean\") {\n            if(currentType === propType)\n                return value;\n        }\n\n        return currentType === propType ? value : defaultValue;\n    }\n\n    checkApply(type, value) {\n        if (typeof value === \"string\") {\n            if (value === \"\")\n                return true;\n        } else if (typeof value === \"number\") {\n            if (value <= 0)\n                return true;\n        }\n\n        let newProps = {\n            username: \"\",\n            password: \"\",\n            host: \"\",\n            port: 0,\n            dbName: \"\",\n            dbType: \"\",\n            scriptEncoding: \"\",\n            driverClassName: \"\",\n            additional: \"\",\n            autoCommit: true,\n            connectionTimeout: 0,\n            idleTimeout: 0,\n            maxLifeTime: 0,\n            maximumPoolSize: 0\n        };\n\n        newProps.username = this.checkProp(type, this.propsType.username, value, this.state.username);\n        newProps.password = this.checkProp(type, this.propsType.password, value, this.state.password);\n        newProps.host = this.checkProp(type, this.propsType.host, value, this.state.host);\n        newProps.port = this.checkProp(type, this.propsType.port, value, this.state.port);\n        newProps.dbName = this.checkProp(type, this.propsType.dbName, value, this.state.dbName);\n        newProps.dbType = this.checkProp(type, this.propsType.dbType, value, this.state.dbType);\n        newProps.scriptEncoding = this.checkProp(type, this.propsType.scriptEncoding, value, this.state.scriptEncoding);\n        newProps.driverClassName = this.checkProp(type, this.propsType.driverClassName, value, this.state.driverClassName);\n        newProps.additional = this.checkProp(type, this.propsType.additional, value, this.state.additional);\n        newProps.autoCommit = this.checkProp(type, this.propsType.autoCommit, value, this.state.autoCommit);\n        newProps.connectionTimeout = this.checkProp(type, this.propsType.connectionTimeout, value, this.state.connectionTimeout);\n        newProps.idleTimeout = this.checkProp(type, this.propsType.idleTimeout, value, this.state.idleTimeout);\n        newProps.maxLifeTime = this.checkProp(type, this.propsType.maxLifeTime, value, this.state.maxLifeTime);\n        newProps.maximumPoolSize = this.checkProp(type, this.propsType.maximumPoolSize, value, this.state.maximumPoolSize);\n\n        return _.isEqual(newProps, this.state.current);\n    }\n\n    reset() {\n        this.setState({\n            username: this.state.current.username,\n            password: this.state.current.password,\n            host: this.state.current.host,\n            port: this.state.current.port,\n            dbName: this.state.current.dbName,\n            dbType: this.state.current.dbType,\n            scriptEncoding: this.state.current.scriptEncoding,\n            driverClassName: this.state.current.driverClassName,\n            additional: this.state.current.additional,\n\n            autoCommit: this.state.current.autoCommit,\n            connectionTimeout: this.state.current.connectionTimeout,\n            idleTimeout: this.state.current.idleTimeout,\n            maxLifeTime: this.state.current.maxLifeTime,\n            maximumPoolSize: this.state.current.maximumPoolSize,\n\n            disabledApply: true,\n            disabledReset: true\n        });\n    }\n\n    searchEncoding(event) {\n        this.autoSearch(event, this.state.encodings, this.propsType.filteredEncodings, \"name\");\n    }\n\n    searchDriverName(event) {\n        this.autoSearch(event, this.state.databases, this.propsType.filteredDriverName, \"driver\");\n    }\n\n    searchDbType(event) {\n        this.autoSearch(event, this.state.databases, this.propsType.filteredDbTypes, \"name\");\n    }\n\n    autoSearch(event, data, filteredType, elementType) {\n        setTimeout(() => {\n            let filtered;\n            if(!event.query.trim().length) {\n                filtered = [...data];\n            } else {\n                filtered = data.filter((enc) => {\n                    return enc[elementType].toLowerCase().startsWith(event.query.toLowerCase());\n                });\n            }\n\n            let result = {};\n            result[filteredType] = filtered;\n            this.setState(result);\n        }, 250)\n    }\n\n    scriptEncodingAutoCompleteTemplate(item) {\n        return (\n            <div>\n                <span className=\"p-card\" style={{padding: \"0.3em\"}}>{item.name}</span>\n                <span style={{marginLeft: \"0.2em\"}}/>\n                <span className=\"p-card\" style={{padding: \"0.3em\"}}>{item.lang}</span>\n            </div>\n        );\n    }\n\n    dbTypeAutoCompleteTemplate(item) {\n        return this.cardTemplate(item.name)\n    }\n\n    driverNameAutoCompleteTemplate(item) {\n        return this.cardTemplate(item.driver);\n    }\n\n    cardTemplate(data) {\n        return (\n            <div>\n                <span className=\"p-card\" style={{padding: \"0.3em\"}}>{data}</span>\n            </div>\n        );\n    }\n\n    render() {\n        return (<>\n            <Toast ref={(el) => this.toast = el} />\n            <Fieldset toggleable={this.state.isToggleable} legend={i18n.t(\"datasource\")} style={{marginTop: \"1em\"}}>\n                <div className=\"p-grid\">\n                    <div className=\"p-col-12 p-md-6\">\n                        <Fieldset toggleable={this.state.isToggleable} legend={i18n.t(\"connection\")} style={{marginTop: \"1em\"}}>\n                            <div className=\"p-grid p-dir-col\">\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"username\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"username\")}</label>\n                                    <InputText value={this.state.username} autoComplete=\"off\" id=\"username\" className=\"p-d-block\"\n                                               onChange={(e) => {\n                                                   this.changeState(\n                                                       {username: e.target.value, disabledApply: true, disabledReset: true},\n                                                       this.propsType.username, e.target.value); }}\n                                               style={{width: \"100%\"}}/>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"password\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"password\")}</label>\n                                    <Password value={this.state.password} id=\"password\" className=\"p-d-block\"\n                                              feedback={false}\n                                              onChange={(e) => {\n                                                  this.changeState(\n                                                      {password: e.target.value, disabledApply: true, disabledReset: true},\n                                                      this.propsType.password, e.target.value); }}\n                                              style={{width: \"100%\"}}/>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"host\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"host\")}</label>\n                                    <InputText value={this.state.host} id=\"host\" className=\"p-d-block\" style={{width: \"100%\"}}\n                                               onChange={(e) => {\n                                                   this.changeState(\n                                                       {host: e.target.value, disabledApply: true, disabledReset: true},\n                                                       this.propsType.host, e.target.value); }}/>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"port\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"port\")}</label>\n                                    <InputText id=\"port\" value={this.state.port} style={{width: \"100%\"}}\n                                               onChange={(e) => {\n                                                   let newPort = parseInt(e.target.value, 10);\n                                                   newPort = isNaN(newPort) ? 0: newPort;\n                                                   this.changeState(\n                                                       {port: newPort, disabledApply: true, disabledReset: true},\n                                                       this.propsType.port, newPort); }}/>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"dbName\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"databaseName\")}</label>\n                                    <InputText value={this.state.dbName} id=\"dbName\" className=\"p-d-block\" style={{width:\"100%\"}}\n                                               onChange={(e) => {\n                                                   this.changeState(\n                                                       {dbName: e.target.value, disabledApply: true, disabledReset: true},\n                                                       this.propsType.dbName, e.target.value); }}/>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"dbType\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"databaseType\")}</label>\n                                    <AutoComplete value={this.state.dbType} id=\"dbType\" style={{width:\"100%\"}}\n                                                  suggestions={this.state.filteredDbTypes}\n                                                  completeMethod={this.searchDbType}\n                                                  dropdown\n                                                  itemTemplate={this.dbTypeAutoCompleteTemplate}\n                                                  field=\"name\"\n                                                  onChange={(e) => {\n                                                      let value = e.target.value.name;\n                                                      if(value === undefined)\n                                                          value = e.target.value;\n                                                      this.changeState(\n                                                          {dbType: value, disabledApply: true, disabledReset: true},\n                                                          this.propsType.dbType, value); }}/>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"scriptEncoding\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"scriptEncoding\")}</label>\n                                    <AutoComplete value={this.state.scriptEncoding} id=\"scriptEncoding\" style={{width:\"100%\"}}\n                                                  suggestions={this.state.filteredEncodings}\n                                                  completeMethod={this.searchEncoding}\n                                                  dropdown\n                                                  itemTemplate={this.scriptEncodingAutoCompleteTemplate}\n                                                  field=\"name\"\n                                                  onChange={(e) => {\n                                                      let value = e.target.value.name;\n                                                      if(value === undefined)\n                                                          value = e.target.value;\n                                                      this.changeState(\n                                                          {scriptEncoding: value, disabledApply: true, disabledReset: true},\n                                                          this.propsType.scriptEncoding, value); }}/>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"driverClassName\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"driverClassName\")}</label>\n                                    <AutoComplete value={this.state.driverClassName} id=\"driverClassName\" style={{width:\"100%\"}}\n                                                  suggestions={this.state.filteredDriverName}\n                                                  completeMethod={this.searchDriverName}\n                                                  dropdown\n                                                  itemTemplate={this.driverNameAutoCompleteTemplate}\n                                                  field=\"driver\"\n                                                  onChange={(e) => {\n                                                      let value = e.target.value.driver;\n                                                      if(value === undefined)\n                                                          value = e.target.value;\n                                                      this.changeState(\n                                                          {driverClassName: value, disabledApply: true, disabledReset: true},\n                                                          this.propsType.driverClassName, value); }}/>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"additional\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"additional\")}</label>\n                                    <InputTextarea value={this.state.additional} id=\"additional\" autoResize className=\"p-d-block\" style={{width:\"100%\"}}\n                                                   onChange={(e) => {\n                                                       this.changeState(\n                                                           {additional: e.target.value, disabledApply: true, disabledReset: true},\n                                                           this.propsType.additional, e.target.value); }}/>\n                                </div>\n                            </div>\n                        </Fieldset>\n                    </div>\n                    <div className=\"p-col-12 p-md-6\">\n                        <Fieldset toggleable={this.state.isToggleable} legend={i18n.t(\"pool\")} style={{marginTop: \"1em\"}}>\n                            <div className=\"p-grid p-dir-col\">\n                                <div className=\"p-col\">\n                                    <div className=\"p-field-checkbox\">\n                                        <Checkbox inputId=\"autoCommitCheckbox\" checked={this.state.autoCommit}\n                                                  onChange={(e) => {\n                                                      this.changeState(\n                                                          {autoCommit: e.checked, disabledApply: true, disabledReset: true},\n                                                          this.propsType.autoCommit, e.checked); }}/>\n                                        <label htmlFor=\"autoCommitCheckbox\">{i18n.t(\"autoCommit\")}</label>\n                                        <Tooltip target=\".autoCommitQuestion\"/>\n                                        <span className=\"pi pi-question autoCommitQuestion\"\n                                              style={{marginLeft: \"0.5em\", fontSize: \"0.8em\"}}\n                                              data-pr-tooltip={i18n.t(\"autoCommitHint\")}/>\n                                    </div>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"connectionTimeout\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"connectionTimeout\")}</label>\n                                    <div className=\"p-field-checkbox\">\n                                        <InputText id=\"connectionTimeout\" value={this.state.connectionTimeout} style={{width: \"100%\"}}\n                                                   onChange={(e) => {\n                                                       let newConnectionTimeout = parseInt(e.target.value, 10);\n                                                       newConnectionTimeout = isNaN(newConnectionTimeout) ? 0: newConnectionTimeout;\n                                                       this.changeState(\n                                                           {connectionTimeout: newConnectionTimeout, disabledApply: true, disabledReset: true},\n                                                           this.propsType.connectionTimeout, newConnectionTimeout); }}/>\n                                        <Tooltip target=\".connTout\" position=\"top\"/>\n                                        <span className=\"pi pi-question connTout\"\n                                              style={{marginLeft: \"0.5em\", fontSize: \"0.8em\"}}\n                                              data-pr-tooltip={i18n.t(\"connectionTimeoutHint\")}/>\n                                    </div>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"idleTimeout\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"idleTimeout\")}</label>\n                                    <div className=\"p-field-checkbox\">\n                                        <InputText id=\"idleTimeout\" value={this.state.idleTimeout} style={{width: \"100%\"}}\n                                               onChange={(e) => {\n                                                   let newIdleTimeout = parseInt(e.target.value, 10);\n                                                   newIdleTimeout = isNaN(newIdleTimeout) ? 0: newIdleTimeout;\n                                                   this.changeState(\n                                                       {idleTimeout: newIdleTimeout, disabledApply: true, disabledReset: true},\n                                                       this.propsType.idleTimeout, newIdleTimeout); }}/>\n                                        <Tooltip target=\".idleTout\" position=\"top\"/>\n                                        <span className=\"pi pi-question idleTout\"\n                                              style={{marginLeft: \"0.5em\", fontSize: \"0.8em\"}}\n                                              data-pr-tooltip={i18n.t(\"idleTimeoutHint\")}/>\n                                    </div>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"maxLifeTime\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"maxLifeTime\")}</label>\n                                    <div className=\"p-field-checkbox\">\n                                        <InputText id=\"maxLifeTime\" value={this.state.maxLifeTime} style={{width: \"100%\"}}\n                                               onChange={(e) => {\n                                                   let newLifeTime = parseInt(e.target.value, 10);\n                                                   newLifeTime = isNaN(newLifeTime) ? 0: newLifeTime;\n                                                   this.changeState(\n                                                       {maxLifeTime: newLifeTime, disabledApply: true, disabledReset: true},\n                                                       this.propsType.maxLifeTime, newLifeTime); }}/>\n                                        <Tooltip target=\".maxLifeTime\" position=\"top\"/>\n                                        <span className=\"pi pi-question maxLifeTime\"\n                                              style={{marginLeft: \"0.5em\", fontSize: \"0.8em\"}}\n                                              data-pr-tooltip={i18n.t(\"maxLifeTimeHint\")}/>\n                                    </div>\n                                </div>\n                                <div className=\"p-col\">\n                                    <label htmlFor=\"maximumPoolSize\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"maximumPoolSize\")}</label>\n                                    <div className=\"p-field-checkbox\">\n                                        <InputText id=\"maximumPoolSize\" value={this.state.maximumPoolSize} style={{width: \"100%\"}}\n                                                   onChange={(e) => {\n                                                       let newMaximumPoolSize = parseInt(e.target.value, 10);\n                                                       newMaximumPoolSize = isNaN(newMaximumPoolSize) ? 0: newMaximumPoolSize;\n                                                       this.changeState(\n                                                           {maximumPoolSize: newMaximumPoolSize, disabledApply: true, disabledReset: true},\n                                                           this.propsType.maximumPoolSize, newMaximumPoolSize); }}/>\n                                        <Tooltip target=\".maxPoolSize\" position=\"top\"/>\n                                        <span className=\"pi pi-question maxPoolSize\"\n                                              style={{marginLeft: \"0.5em\", fontSize: \"0.8em\"}}\n                                              data-pr-tooltip={i18n.t(\"maximumPoolSizeHint\")}/>\n                                    </div>\n                                </div>\n                            </div>\n                        </Fieldset>\n                    </div>\n                </div>\n                <div className=\"p-grid p-dir-col\">\n                    <div className=\"p-col-12\" style={{marginTop: \"1em\"}}>\n                        <Button label={i18n.t(\"applyChangesBtn\")} style={{float: \"left\", width: \"100%\"}} disabled={this.state.disabledApply}\n                                onClick={this.changeDatasource}/>\n                    </div>\n                    <div className=\"p-col-12\" style={{marginTop: \"1em\"}}>\n                        <Button className=\"p-button-warning\" label={i18n.t(\"reset\")} style={{float: \"left\", width: \"100%\"}}\n                                disabled={this.state.disabledReset}\n                                onClick={this.reset}/>\n                    </div>\n                </div>\n            </Fieldset>\n        </>\n        );\n    }\n}","\nexport function dbType() {\n    return [\n        {\n            name: \"firebirdsql\",\n            driver: \"org.firebirdsql.jdbc.FBDriver\"\n        },\n        {\n            name: \"mysql\",\n            driver: \"com.mysql.jdbc.Driver\"\n        },\n        {\n            name: \"postgresql\",\n            driver: \"org.postgresql.Driver\"\n        },\n        {\n            name: \"db2\",\n            driver: \"COM.ibm.db2.jdbc.app.DB2Driver\"\n        }\n    ]\n}","import API from './API';\n\nexport class ClientTimeoutService {\n\n    async getClientTimeout() {\n        return (await API.get('/clients/timeout')).data;\n    }\n\n    async changeClientTimeout(toutValue) {\n        let toutBody = {\n            client_timeout: toutValue\n        };\n\n        return (await API.put('/clients/timeout', toutBody)).data;\n    }\n}\n","import React from 'react';\nimport {Component} from \"react\";\nimport {Button} from \"primereact/button\";\nimport {Fieldset} from \"primereact/fieldset\";\nimport {InputText} from \"primereact/inputtext\";\nimport {ClientTimeoutService} from \"../service/ClientTimeoutService\";\nimport _ from \"lodash\";\nimport {Toast} from \"primereact/toast\";\nimport \"./ClientSettingsView.css\";\nimport {appSettings} from \"./AppSettings\";\nimport i18n from \"i18next\";\n\nexport class ClientSettingsView extends Component {\n\n    smallHintStyleClasses = {\n        visible: \"sm-cl-tout-hint-v\",\n        hidden: \"sm-cl-tout-hint-h\"\n    };\n\n    settingsType = {\n        clientTimeout: \"clientTimeout\"\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            clientTimeout: 0,\n            disabledApply: true,\n            disabledReset: true,\n            isToggleable: !(window.innerWidth > 600),\n            smallStyleClass: this.smallHintStyleClasses.hidden,\n            current: {\n                clientTimeout: 0\n            }\n        };\n\n        this.clientTimeoutService = new ClientTimeoutService();\n\n        this.changeClientSettings = this.changeClientSettings.bind(this);\n        this.changeState = this.changeState.bind(this);\n        this.checkApply = this.checkApply.bind(this);\n        this.checkSetting = this.checkSetting.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n\n    updateDimensions = () => {\n        if(window.innerWidth <= 600) {\n            this.setState({ isToggleable: true });\n        } else {\n            this.setState({ isToggleable: false });\n        }\n    };\n\n    async componentDidMount() {\n        window.addEventListener('resize', this.updateDimensions);\n        this.clientTimeoutService.getClientTimeout().then(data => {\n            this.setState({\n                clientTimeout: data[\"client_timeout\"],\n                current: {\n                    clientTimeout: data[\"client_timeout\"]\n                }\n            });\n        });\n    }\n\n    async changeClientSettings() {\n        try {\n            let data = await this.clientTimeoutService.changeClientTimeout(this.state.clientTimeout);\n\n            this.setState({\n                current: {\n                    clientTimeout: this.state.clientTimeout\n                },\n                disabledApply: true,\n                disabledReset: true\n            });\n\n            this.toast.show({\n                severity: 'success',\n                summary: 'Successful',\n                detail: data.message,\n                life: appSettings.TOAST_LIVE\n            });\n\n            this.props.restart();\n        } catch (e) {\n            let response = e.response.data;\n            console.log(response);\n            console.log('Change clients timeout failed: ' + response);\n            this.toast.show({\n                severity: 'error',\n                summary: 'Error',\n                detail: response.message,\n                life: appSettings.TOAST_LIVE\n            });\n        }\n    }\n\n    changeState(chState, type, value) {\n        let disabled = this.checkApply(type, value);\n        chState.disabledApply = disabled;\n        chState.disabledReset = disabled;\n        this.setState(chState);\n    }\n\n    checkSetting(currentType, settingType, value, defaultValue) {\n        return currentType === settingType ? value : defaultValue;\n    }\n\n    checkApply(type, value) {\n        if (typeof value === \"string\") {\n            if (value === \"\")\n                return true;\n        } else if (typeof value === \"number\") {\n            if (value < 0)\n                return true;\n        }\n\n        let newSettings = {\n            clientTimeout: 0\n        };\n\n        newSettings.clientTimeout = this.checkSetting(type, this.settingsType.clientTimeout, value, this.state.clientTimeout);\n\n        return _.isEqual(newSettings, this.state.current);\n    }\n\n    reset() {\n        this.setState({\n            clientTimeout: this.state.current.clientTimeout,\n            disabledApply: true,\n            disabledReset: true\n        });\n    }\n\n    render() {\n        return (<>\n            <Toast ref={(el) => this.toast = el} />\n            <Fieldset toggleable={this.state.isToggleable} legend={i18n.t('clients')} style={{marginTop: \"1em\"}}>\n                <div className=\"p-grid p-dir-col\">\n                    <div className=\"p-col\">\n                        <label htmlFor=\"clTout\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"clientTimeoutValue\")}</label>\n                        <InputText value={this.state.clientTimeout} aria-describedby=\"clTout-help\"\n                                   onChange={(e) => {\n                                       let newClTout = parseInt(e.target.value, 10);\n                                       newClTout = isNaN(newClTout) ? 0: newClTout;\n                                       this.changeState(\n                                           {clientTimeout: newClTout, disabledApply: true, disabledReset: true},\n                                           this.settingsType.clientTimeout, newClTout);\n                                   }}\n                                   onFocus={() => this.setState({smallStyleClass: this.smallHintStyleClasses.visible})}\n                                   onBlur={() => this.setState({smallStyleClass: this.smallHintStyleClasses.hidden})}\n                                   autoComplete=\"off\" id=\"clTout\" className=\"p-d-block\" style={{width: \"100%\"}}/>\n                        <small id=\"clTout-help\" className={this.state.smallStyleClass}\n                               style={{float: \"left\", marginTop: \"0.3em\"}}>{i18n.t(\"clientTimeoutValueHint\")}</small>\n                    </div>\n                    <div className=\"p-col\" style={{marginTop: \"1em\"}}>\n                        <Button label={i18n.t(\"applyChangesBtn\")} disabled={this.state.disabledApply}\n                                style={{float: \"left\", width: \"100%\"}}\n                                onClick={this.changeClientSettings}/>\n                    </div>\n                    <div className=\"p-col\" style={{marginTop: \"1em\"}}>\n                        <Button className=\"p-button-warning\" label={i18n.t(\"reset\")} disabled={this.state.disabledReset}\n                                style={{float: \"left\", width: \"100%\"}}\n                                onClick={this.reset}/>\n                    </div>\n                </div>\n            </Fieldset>\n            </>\n        );\n    }\n}","import API from './API';\n\nexport class RestartService {\n\n    async restart() {\n        return (await API.get(\"/restart\")).data;\n    }\n}\n","import API from './API';\nimport {getCookie} from \"../utils/CookiesUtils\";\nimport axios from \"axios\";\n\nexport class SettingsService {\n\n    async changePassword(pass) {\n        let data = {password: pass};\n        return (await API.put(\"/password\", data)).data;\n    }\n\n    async logout() {\n        let xsrfToken = getCookie(\"XSRF-TOKEN\");\n        let data = {\"XSRF-TOKEN\": xsrfToken};\n        return (await axios.post(\"/logout\", data)).data;\n    }\n}\n","import React from 'react';\nimport {Component} from \"react\";\nimport {Fieldset} from \"primereact/fieldset\";\nimport \"./ClientSettingsView.css\";\nimport {Dropdown} from \"primereact/dropdown\";\nimport {changeLanguage, languages} from \"../utils/Translate\";\nimport i18n from \"i18next\";\nimport {Button} from \"primereact/button\";\nimport {ProgressBar} from \"primereact/progressbar\";\nimport {visibility} from \"../utils/CssProps\";\nimport {SettingsService} from \"../service/SettingsService\";\nimport {appSettings} from \"./AppSettings\";\nimport {Password} from \"primereact/password\";\nimport {Accordion, AccordionTab} from \"primereact/accordion\";\nimport \"./OtherSettingsView.css\";\nimport {Toast} from \"primereact/toast\";\nimport {Toolbar} from \"primereact/toolbar\";\n\nexport class OtherSettingsView extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedLang: this.props.lang,\n            isDarkMode: this.props.isDarkMode,\n            newPass: \"\",\n            changePassLoading: visibility.hidden,\n            isToggleable: !(window.innerWidth > 600)\n        };\n\n        this.onLangChange = this.onLangChange.bind(this);\n        this.confirmChangePass = this.confirmChangePass.bind(this);\n        this.settingsService = new SettingsService();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n\n    updateDimensions = () => {\n        if(window.innerWidth <= 600) {\n            this.setState({ isToggleable: true });\n        } else {\n            this.setState({ isToggleable: false });\n        }\n    };\n\n    componentDidMount() {\n        window.addEventListener('resize', this.updateDimensions);\n    }\n\n    onLangChange(e) {\n        this.setState({ selectedLang: e.value});\n        changeLanguage(e.value);\n        this.props.refresh();\n    }\n\n    async confirmChangePass() {\n        try {\n            this.setState({changePassLoading: visibility.visible});\n            let data = await this.settingsService.changePassword(this.state.newPass);\n            this.setState({changePassLoading: visibility.hidden});\n            this.toast.show({ severity: 'success', summary: i18n.t(\"successful\"), detail: data.message, life: appSettings.TOAST_LIVE });\n            this.props.restart();\n        } catch (e) {\n            console.log(e);\n            let response = e.response.data;\n            console.log(response);\n            console.log(i18n.t(\"changePassRequestFailed\") + response);\n            this.setState({\n                changePassLoading: visibility.hidden\n            });\n            this.toast.show({ severity: 'error', summary: i18n.t(\"error\"), detail: response.message, life: appSettings.TOAST_LIVE });\n        }\n    }\n\n    render() {\n        return (<>\n                <Toast ref={(el) => this.toast = el} />\n                <Fieldset toggleable={this.state.isToggleable} legend={i18n.t(\"other\")} style={{marginTop: \"1em\"}}>\n                    <div className=\"p-grid p-dir-col\">\n                        <div className=\"p-col\">\n                            <label htmlFor=\"clTout\" className=\"p-d-block\" style={{textAlign: \"left\"}}>{i18n.t(\"language\")}</label>\n                            <Dropdown style={{float: \"left\", marginTop: \"0.2em\"}} value={this.state.selectedLang}\n                                      options={languages} onChange={this.onLangChange} optionLabel=\"lng\"\n                                      optionValue=\"code\" placeholder={i18n.t(\"languagePlaceholder\")} />\n                        </div>\n                        <div className=\"p-col\">\n                            <Accordion>\n                                <AccordionTab header={i18n.t(\"changePass\")} className=\"changePass\">\n                                    <div className=\"p-inputgroup\">\n                                        <Password promptLabel={i18n.t(\"enterNewPass\")}\n                                                  weakLabel={i18n.t(\"weak\")}\n                                                  mediumLabel={i18n.t(\"medium\")}\n                                                  strongLabel={i18n.t(\"strong\")}\n                                                  onInput={ (e) => this.setState({newPass: e.target.value})}\n                                        />\n                                        <Button label={i18n.t(\"change\")} icon=\"pi pi-key\" className=\"p-button-success\"\n                                                disabled={(this.state.newPass) === \"\"}\n                                                onClick={this.confirmChangePass}\n                                        />\n                                    </div>\n                                    <div style={{marginTop: \"0.2em\"}} />\n                                    <ProgressBar mode=\"indeterminate\" style={{height: \"0.2em\", visibility: this.state.changePassLoading}} />\n                                </AccordionTab>\n                            </Accordion>\n                        </div>\n                    </div>\n                </Fieldset>\n            </>\n        );\n    }\n}","import React, {Component} from 'react';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css'\nimport {DatasourceView} from \"./DatasourceView\";\nimport {ClientSettingsView} from \"./ClientSettingsView\";\nimport {Button} from \"primereact/button\";\nimport {RestartService} from \"../service/RestartService\";\nimport {appSettings} from \"./AppSettings\";\nimport {Toast} from \"primereact/toast\";\nimport {OtherSettingsView} from \"./OtherSettingsView\";\nimport i18n from \"i18next\";\n\nlet restartState = false;\n\nconst iconRestartButton = {\n    basic: \"pi pi-refresh\",\n    anim: \"pi pi-spin pi-refresh\"\n};\n\nexport class SettingsView extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showRestartButton: restartState,\n            iconButtonClassName: iconRestartButton.basic,\n            restartBtnText: i18n.t(\"restart\")\n        };\n\n        this.restartService = new RestartService();\n\n        this.needRestart = this.needRestart.bind(this);\n        this.refresh = this.refresh.bind(this);\n        this.restart = this.restart.bind(this);\n    }\n\n    needRestart() {\n        restartState = true;\n        this.setState({\n            showRestartButton: restartState\n        });\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n\n    refresh() {\n        this.forceUpdate();\n        this.props.refresh();\n    }\n\n    async restart() {\n        this.setState({\n            iconButtonClassName: iconRestartButton.anim\n        });\n        let result = await this.restartService.restart();\n        this.toast.show({ severity: 'success', summary: i18n.t('successful'), detail: result.message, life: appSettings.TOAST_LIVE });\n\n        restartState = false;\n        let resSec = 5;\n        let btnTxt = i18n.t(\"restartTime\") + \" \" + resSec + i18n.t(\"restartTimeSec\") + \"...\";\n        this.setState({\n            restartBtnText: btnTxt\n        });\n\n        setTimeout(() => { window.location.replace(\"/login\") }, resSec * 1000);\n    }\n\n    render() {\n        return (\n            <div>\n                <Toast ref={(el) => this.toast = el} />\n                {this.state.showRestartButton ? (\n                    <Button className=\"p-button-rounded p-button-outlined\" style={{marginTop: \"0.5em\"}}\n                            icon={this.state.iconButtonClassName} label={this.state.restartBtnText}\n                            onClick={this.restart}/> ) :\n                    (<div/>)}\n                <div className=\"p-grid nested-grid\">\n                    <div className=\"p-col-12 p-md-8 p-lg-8\">\n                        <DatasourceView restart={this.needRestart} lang={this.props.lang}/>\n                    </div>\n                    <div className=\"p-col-12 p-md-4 p-lg-4\">\n                    <div className=\"p-grid p-dir-col\">\n                        <div className=\"p-col\">\n                            <ClientSettingsView restart={this.needRestart}/>\n                        </div>\n                        <div className=\"p-col\">\n                            <OtherSettingsView restart={this.needRestart} refresh={this.refresh} lang={this.props.lang}/>\n                        </div>\n                    </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import API from './API';\n\nexport class LogService {\n\n    async getLogs() {\n        return (await API.get(\"/logs\")).data;\n    }\n}\n","import React from \"react\";\nimport {Component} from \"react\";\nimport {DataTable} from \"primereact/datatable\";\nimport {Column} from \"primereact/column\";\nimport {LogService} from \"../service/LogService\";\nimport {InputText} from \"primereact/inputtext\";\nimport {Dropdown} from \"primereact/dropdown\";\nimport {Row} from \"primereact/row\";\nimport {ColumnGroup} from \"primereact/columngroup\";\nimport i18n from \"i18next\";\nimport {Calendar} from \"primereact/calendar\";\nimport {getCalendarLocation} from \"../utils/Translate\";\n\nexport class DataTableLogs extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            logs: null,\n            logsAmount: 0,\n            searchText: \"\",\n            date: null,\n            types: [],\n            selectedTypes: null,\n            searchChips: [],\n            minDate: null,\n            maxDate: null,\n            isMobile: !(window.innerWidth > 600)\n        };\n\n        this.logService = new LogService();\n        this.delaySearchTimer = null;\n        this.handleSearch = this.handleSearch.bind(this);\n\n        this.headerTemplate = this.headerTemplate.bind(this);\n        this.typeBodyTemplate = this.typeBodyTemplate.bind(this);\n        this.onTypeFilterChange = this.onTypeFilterChange.bind(this);\n        this.onMessageFilterInput = this.onMessageFilterInput.bind(this);\n        this.typeItemTemplate = this.typeItemTemplate.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.updateDimensions);\n        this.logService.getLogs().then(data => {\n            let datesLog = [];\n\n            data.logs.forEach(log => {\n                datesLog.push(log.date);\n            });\n\n            let sortDatesLog = datesLog.sort();\n            let minDateArr = sortDatesLog[0].split(\"-\").map(d=>+d);\n            let maxDateArr = sortDatesLog[sortDatesLog.length - 1].split(\"-\").map(d=>+d);\n\n            let minDate = new Date(minDateArr[2], minDateArr[1]-1, minDateArr[0]);\n            let maxDate = new Date(maxDateArr[2], maxDateArr[1]-1, maxDateArr[0]);\n\n            this.setState({\n                logs: data.logs,\n                logsAmount: data.logs.length,\n                types: data.types,\n                minDate: minDate,\n                maxDate: maxDate\n            });\n        });\n    }\n\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n\n    updateDimensions = () => {\n        if(window.innerWidth <= 600) {\n            this.setState({ isMobile: true });\n        } else {\n            this.setState({ isMobile: false });\n        }\n    };\n\n    componentDidUpdate (prevProps, prevState) {\n        if(prevState.searchText !== this.state.searchText) {\n            this.handleSearch();\n        }\n    }\n\n    handleSearch = () => {\n        clearTimeout(this.delaySearchTimer);\n        this.delaySearchTimer = setTimeout(() => {\n            this.setState({globalFilter: this.state.searchText})\n        }, 500);\n    };\n\n    headerTemplate(data) {\n        return (\n            <div className=\"p-card\" style={{padding: \"0.5em\", display: \"inline-block\"}}>\n                <div style={{fontWeight: \"bold\", fontSize: \"16pt\"}}>{data.date}</div>\n            </div>\n        );\n    }\n\n    footerTemplate() {\n        return (<></>);\n    }\n\n    typeBodyTemplate(rowData) {\n        if (rowData.type === \"Error\") {\n            return (\n                <div style={{color: \"#D32F2F\", fontWeight: \"bold\"}}>\n                    {rowData.type}\n                </div>);\n        } else {\n            return (\n                <div style={{color: \"#689F38\", fontWeight: \"bold\"}}>\n                    {rowData.type}\n                </div>\n            )\n        }\n    }\n\n    renderHeader() {\n        return (\n            <div style={{textAlign: \"left\"}}>\n                <span className=\"p-input-icon-left\">\n                    <i className=\"pi pi-search\"/>\n                    <InputText\n                        type=\"search\"\n                        onInput={ (e) => this.setState({searchText: e.target.value}) }\n                        placeholder={i18n.t(\"globalSearch\")}/>\n                </span>\n                {this.state.isMobile ? <div/> :\n                <Calendar ref={(cal) => this.cal = cal}\n                          dateFormat=\"dd.mm.yy\" placeholder={i18n.t(\"pickADate\")}\n                          value={this.state.date}\n                          style={{width: \"300px\", marginLeft: \"0.5em\", textAlign: \"left\"}}\n                          minDate={this.state.minDate}\n                          maxDate={this.state.maxDate}\n                          readOnlyInput\n                          showButtonBar\n                          locale={getCalendarLocation(this.props.lang)}\n                          onChange={(e) => {\n                              this.setState({date: e.value});\n                              try {\n                                  let dt = e.value;\n                                  let day = dt.getDate();\n                                  let zero = (day / 10) < 1 ? \"0\" : \"\";\n                                  let month = dt.getMonth() + 1;\n                                  let year = dt.getFullYear();\n                                  let res = [day, month, year].join(\".\");\n                                  this.onMessageFilterInput(zero + res);\n                              } catch (er) {\n                                  this.onMessageFilterInput(\"\");\n                              }\n                          }}/>\n                }\n            </div>\n        );\n    }\n\n    renderFooterGroup(logsAmount) {\n        let str = i18n.t(\"recordsSummary\") + \" \" + logsAmount;\n        return (\n            <ColumnGroup>\n                <Row>\n                    <Column footer={str} colSpan={3} footerStyle={{textAlign: 'right'}}/>\n                </Row>\n            </ColumnGroup>\n        );\n    }\n\n    renderTypeFilter() {\n        return (\n            <Dropdown value={this.state.selectedTypes} options={this.state.types} onChange={this.onTypeFilterChange}\n                      itemTemplate={this.typeItemTemplate}\n                      showClear\n                      placeholder={i18n.t(\"selectAType\")}\n                      className=\"p-column-filter\"\n                      /*style={{width: \"10.5em\"}}*//>\n        );\n    }\n\n    renderMessageFilter() {\n        return (\n                <InputText style={{width: \"30em\"}}\n                       onInput={(e) => this.onMessageFilterInput(e.target.value)}\n                       className=\"p-column-filter\"\n                       placeholder={i18n.t(\"searchByMessage\")}/>\n        );\n    }\n\n    typeItemTemplate(option) {\n        if (option === \"Error\") {\n            return (\n                <span style={{color: \"#D32F2F\", fontWeight: \"bold\"}}>\n                    {option}\n                </span>);\n        } else {\n            return (\n                <span style={{color: \"#689F38\", fontWeight: \"bold\"}}>\n                    {option}\n                </span>\n            )\n        }\n    }\n\n    onTypeFilterChange(event) {\n        this.dt.filter(event.value, 'type', 'equals');\n        this.setState({selectedTypes: event.value});\n    }\n\n    onMessageFilterInput(text) {\n        this.dt.filter(text, 'msg', 'contains');\n    }\n\n    render() {\n        const header = this.renderHeader();\n        const typeFilter = this.renderTypeFilter();\n        const msgFilter = this.renderMessageFilter();\n\n        return (\n            <div>\n                <DataTable ref={(el) => this.dt = el}\n                           header={header}\n                           value={this.state.logs}\n                           rowGroupMode=\"subheader\"\n                           groupField=\"date\"\n                           emptyMessage={i18n.t(\"logsNotFound\")}\n                           sortMode=\"single\"\n                           sortField=\"date\"\n                           globalFilter={this.state.globalFilter}\n                           rowGroupHeaderTemplate={this.headerTemplate}\n                           rowGroupFooterTemplate={this.footerTemplate}\n                           footerColumnGroup={this.renderFooterGroup(this.state.logsAmount)}\n                           sortOrder={1}\n                           paginator={true}\n                           rows={10}\n                           rowsPerPageOptions={[10,25,50]}\n                           responsive\n                           paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n                           currentPageReportTemplate={i18n.t(\"from\") + \" {first} \" + i18n.t(\"to\") + \" {last} \" + i18n.t(\"of\") + \" {totalRecords}\"}>\n                    <Column header=\"#\" body={(data, props) => props.rowIndex + 1} style={{width: \"5%\", color:\"gray\"}}/>\n                    <Column field=\"type\" body={this.typeBodyTemplate} header={i18n.t(\"type\")} style={{width: \"10%\"}}\n                            filter\n                            filterElement={typeFilter}/>\n                    <Column field=\"msg\" header={i18n.t(\"message\")} style={{width: \"85%\", wordWrap: \"break-word\"}}\n                            filter={!this.state.isMobile}\n                            filterElement={msgFilter}\n                            />\n                </DataTable>\n            </div>\n        );\n    }\n}","import React, {Component, createRef} from \"react\";\nimport {TabMenu} from \"primereact/tabmenu\";\nimport {DataTableClients} from \"./DataTableClients\";\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport {DataTableBlacklist} from \"./DataTableBlacklist\";\nimport {SettingsView} from \"./SettingsView\";\nimport {DataTableLogs} from \"./DataTableLogs\";\nimport i18n from \"i18next\";\nimport {getLanguage} from \"../utils/Translate\";\nimport \"./LSTabMenu.css\";\nimport {getCookie, setCookie} from \"../utils/CookiesUtils\";\n\nclass LSTabMenuInner extends Component {\n\n    menus = [ {\n        label: i18n.t(\"clients\"),\n        keyLabel: \"clients\",\n        icon: \"pi pi-fw pi-users\",\n        path: \"/clients\",\n        command: () => { window.location.hash = \"/clients\" }\n    }, {\n        label: i18n.t(\"blacklist\"),\n        keyLabel: \"blacklist\",\n        icon: \"pi pi-fw pi-ban\",\n        path: \"/blacklist\",\n        command: () => { window.location.hash = \"/blacklist\" }\n    }, {\n        // label: \"Devices\",\n        // icon: \"pi pi-fw pi-mobile\",\n        // command: () => { window.location.hash = \"/devices\"}\n        // }, {\n        label: i18n.t(\"logs\"),\n        keyLabel: \"logs\",\n        icon: \"pi pi-fw pi-desktop\",\n        path: \"/logs\",\n        command: () => { window.location.hash = \"/logs\" }\n    }, {\n        label: i18n.t(\"settings\"),\n        keyLabel: \"settings\",\n        icon: \"pi pi-fw pi-cog\",\n        path: \"/settings\",\n        command: () => { window.location.hash = \"/settings\" }\n    }];\n\n    constructor(props) {\n        super(props);\n        this.refresh = this.refresh.bind(this);\n        this.tabRef = createRef();\n\n        let tabMenu = this.menus[0];\n        if(getCookie(\"tabKeyLabel\") !== undefined) {\n            let tabKeyLabel = getCookie(\"tabKeyLabel\");\n            tabMenu = this.menus.find((e, i, a) => {\n                if(e.keyLabel === tabKeyLabel)\n                    return e;\n                else\n                    return false;\n            });\n        }\n\n        this.state = {\n            activeItem: tabMenu,\n            tabName: i18n.t(tabMenu.keyLabel)\n        }\n\n    }\n\n    refresh() {\n        this.forceUpdate();\n        this.menus.forEach(menu => { menu.label = i18n.t(menu.keyLabel) });\n        this.setState({\n            tabName: i18n.t(this.state.activeItem.keyLabel)\n        });\n    }\n\n    setActiveIndex(path) {\n        let _activeItem = this.menus.filter(menu => { return menu.path === path; });\n\n        this.setState({\n            activeItem: _activeItem[0],\n            tabName: i18n.t(_activeItem[0].keyLabel)\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <span id=\"tabName\" style={{fontSize: \"3rem\"}}>{this.state.tabName}</span>\n                <TabMenu id=\"lsTabMenu\" ref={this.tabRef}\n                         onTabChange={(e) => {\n                             setCookie(\"tabKeyLabel\", e.value.keyLabel);\n                             setCookie(\"hashLink\", e.value.path);\n                             this.setState({activeItem: e.value}) }\n                         }\n                         activeItem={this.state.activeItem} model={this.menus} />\n            </>);\n    }\n}\n\nexport class LSTabMenu extends Component {\n\n    constructor(props) {\n        super(props);\n        this.lsTabRef = React.createRef();\n        this.refresh = this.refresh.bind(this);\n    }\n\n    refresh() {\n        this.lsTabRef.current.refresh();\n    }\n\n    setActiveIndex(path) {\n        this.lsTabRef.current.setActiveIndex(path);\n    }\n\n    render() {\n        return (\n            <Router>\n                <LSTabMenuInner ref={this.lsTabRef}/>\n                <Route key=\"/clients\" exact path=\"/clients\" component={() => <DataTableClients/>}/>\n                <Route key=\"/blacklist\" exact path=\"/blacklist\" component={() => <DataTableBlacklist/>}/>\n                {/*<Route key=\"/devices\" exact path=\"/devices\"/>*/}\n                <Route key=\"/logs\" exact path=\"/logs\" component={() => <DataTableLogs lang={getLanguage()}/>}/>\n                <Route key=\"/settings\" exact path=\"/settings\"\n                       component={() => <SettingsView refresh={this.refresh} lang={getLanguage()}/>}/>\n            </Router>\n        );\n    }\n}","import React, {Component} from \"react\";\nimport {Sidebar} from \"primereact/sidebar\";\nimport {Button} from \"primereact/button\";\nimport i18n from \"i18next\";\nimport ls_logo from '../static/ls_logo_svg.svg'\nimport {setCookie} from \"../utils/CookiesUtils\";\nimport {SettingsService} from \"../service/SettingsService\";\n\nexport class MainSidebar extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.changeRoute = this.changeRoute.bind(this);\n        this.refresh = this.refresh.bind(this);\n        this.logout = this.logout.bind(this);\n        this.settingsService = new SettingsService();\n    }\n\n    changeRoute(path) {\n        setCookie(\"tabKeyLabel\", path.substr(1));\n        setCookie(\"hashLink\", path);\n        window.location.hash = path;\n        this.props.onHideSidebar(path);\n    }\n\n    async logout() {\n        await this.settingsService.logout();\n        window.location.replace(\"/login\");\n    }\n\n    refresh() {\n        this.forceUpdate();\n    }\n\n    render() {\n        return (\n            <Sidebar visible={this.props.onShowSidebar} onHide={this.props.onHideSidebar}>\n                <img src={ls_logo} alt=\"\" width=\"64\" height=\"64\"/>\n                <h1 style={{ fontWeight: 'normal' }}>LightSearch</h1>\n                <div className=\"p-grid p-dir-col\">\n                    <Button icon=\"pi pi-fw pi-users\" label={i18n.t(\"clients\")}\n                            onClick={() => this.changeRoute(\"/clients\")}/>\n                    <Button icon=\"pi pi-fw pi-ban\" label={i18n.t(\"blacklist\")} style={{marginTop: \"0.5em\"}}\n                            onClick={() => this.changeRoute(\"/blacklist\")}/>\n                    <Button icon=\"pi pi-fw pi-desktop\" label={i18n.t(\"logs\")} style={{marginTop: \"0.5em\"}}\n                            onClick={() => this.changeRoute(\"/logs\")}/>\n                    <Button icon=\"pi pi-fw pi-cog\" label={i18n.t(\"settings\")} style={{marginTop: \"0.5em\"}}\n                            onClick={() => this.changeRoute(\"/settings\")}/>\n                    <Button icon=\"pi pi-fw pi-sign-out\" label={i18n.t(\"logout\")} className=\"p-button-secondary\"\n                            style={{marginTop: \"0.5em\"}} onClick={() => {this.logout().then(r => console.log(r))}}/>\n                </div>\n            </Sidebar>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport {MainSidebar} from \"./MainSidebar\";\nimport {Button} from \"primereact/button\";\n\nexport class SidebarButton extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isSidebarVisible: false\n        };\n\n        this.onHideSidebar = this.onHideSidebar.bind(this);\n    }\n\n    onHideSidebar(path) {\n        this.setState({\n            isSidebarVisible: false\n        });\n        if(path !== undefined) {\n            this.props.tabMenuRef.current.setActiveIndex(path);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <MainSidebar refresh={this.props.refresh} onShowSidebar={this.state.isSidebarVisible} onHideSidebar={this.onHideSidebar}/>\n                <Button icon=\"pi pi-bars\" className=\"p-button-secondary\"\n                        style={{ position: \"sticky\", marginLeft: \"0.3em\", float: \"left\"}}\n                        onClick={()=>{ this.setState({isSidebarVisible: true}) }} />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport ls_logo from '../static/ls_logo_big.png'\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport {LSTabMenu} from \"./LSTabMenu\";\nimport {getLanguage, initLanguage} from \"../utils/Translate\";\nimport {SidebarButton} from \"./SidebarButton\";\nimport {getCookie} from \"../utils/CookiesUtils\";\n\nconst lang = getLanguage();\ninitLanguage(lang);\n\nlet hashLink = getCookie(\"hashLink\");\nif(hashLink !==undefined )\n    window.location.hash = hashLink;\nelse\n    window.location.hash = \"clients\";\n\nfunction App() {\n    let tabMenuRef = React.createRef();\n    return (\n        <div className=\"App\">\n            <SidebarButton tabMenuRef={tabMenuRef}/>\n            <div style={{margin: \"1em\"}}>\n                <img src={ls_logo} alt=\"logo\" width=\"150\" height=\"150\"/>\n            </div>\n            <div className=\"p-card\" style={{padding: \"0.5em\", borderRadius: \"3px\"}}>\n                <LSTabMenu ref={tabMenuRef}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ls_logo_big.e65af6f7.png\";","module.exports = __webpack_public_path__ + \"static/media/ls_logo_svg.54d4b73c.svg\";"],"sourceRoot":""}